// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_4u_array_ap_fixed_24_16_0_0_0_16u_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [23:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [23:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [23:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
output  [23:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [23:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [23:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [23:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [23:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [23:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [23:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [23:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [23:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [23:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [23:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [23:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [23:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [23:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [23:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [23:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state6;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg   [4:0] i_in_0_reg_678;
wire   [0:0] icmp_ln36_fu_759_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op166;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_in_fu_765_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln203_fu_771_p1;
reg   [3:0] trunc_ln203_reg_1824;
wire    ap_CS_fsm_state4;
reg   [23:0] tmp_data_0_V16_reg_2148;
wire    ap_CS_fsm_state5;
wire    grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_ready;
wire    grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_done;
reg   [23:0] tmp_data_1_V16_reg_2153;
reg   [23:0] tmp_data_2_V16_reg_2158;
reg   [23:0] tmp_data_3_V16_reg_2163;
reg   [23:0] tmp_data_4_V_reg_2168;
reg   [23:0] tmp_data_5_V_reg_2173;
reg   [23:0] tmp_data_6_V_reg_2178;
reg   [23:0] tmp_data_7_V_reg_2183;
reg   [23:0] tmp_data_8_V_reg_2188;
reg   [23:0] tmp_data_9_V_reg_2193;
reg   [23:0] tmp_data_10_V_reg_2198;
reg   [23:0] tmp_data_11_V_reg_2203;
reg   [23:0] tmp_data_12_V_reg_2208;
reg   [23:0] tmp_data_13_V_reg_2213;
reg   [23:0] tmp_data_14_V_reg_2218;
reg   [23:0] tmp_data_15_V_reg_2223;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start;
wire    grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_idle;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_0;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_1;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_2;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_3;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_4;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_5;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_6;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_7;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_8;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_9;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_10;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_11;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_12;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_13;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_14;
wire   [23:0] grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_15;
reg    grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg;
reg   [23:0] tmp_data_0_V_fu_358;
reg   [23:0] tmp_data_1_V_fu_362;
reg   [23:0] tmp_data_2_V_fu_366;
reg   [23:0] tmp_data_3_V_fu_370;
reg   [23:0] tmp_data_0_V_1_fu_374;
reg   [23:0] tmp_data_1_V_1_fu_378;
reg   [23:0] tmp_data_2_V_1_fu_382;
reg   [23:0] tmp_data_3_V_1_fu_386;
reg   [23:0] tmp_data_0_V_2_fu_390;
reg   [23:0] tmp_data_1_V_2_fu_394;
reg   [23:0] tmp_data_2_V_2_fu_398;
reg   [23:0] tmp_data_3_V_2_fu_402;
reg   [23:0] tmp_data_0_V_3_fu_406;
reg   [23:0] tmp_data_1_V_3_fu_410;
reg   [23:0] tmp_data_2_V_3_fu_414;
reg   [23:0] tmp_data_3_V_3_fu_418;
reg   [23:0] tmp_data_0_V_4_fu_422;
reg   [23:0] tmp_data_1_V_4_fu_426;
reg   [23:0] tmp_data_2_V_4_fu_430;
reg   [23:0] tmp_data_3_V_4_fu_434;
reg   [23:0] tmp_data_0_V_5_fu_438;
reg   [23:0] tmp_data_1_V_5_fu_442;
reg   [23:0] tmp_data_2_V_5_fu_446;
reg   [23:0] tmp_data_3_V_5_fu_450;
reg   [23:0] tmp_data_0_V_6_fu_454;
reg   [23:0] tmp_data_1_V_6_fu_458;
reg   [23:0] tmp_data_2_V_6_fu_462;
reg   [23:0] tmp_data_3_V_6_fu_466;
reg   [23:0] tmp_data_0_V_7_fu_470;
reg   [23:0] tmp_data_1_V_7_fu_474;
reg   [23:0] tmp_data_2_V_7_fu_478;
reg   [23:0] tmp_data_3_V_7_fu_482;
reg   [23:0] tmp_data_0_V_8_fu_486;
reg   [23:0] tmp_data_1_V_8_fu_490;
reg   [23:0] tmp_data_2_V_8_fu_494;
reg   [23:0] tmp_data_3_V_8_fu_498;
reg   [23:0] tmp_data_0_V_9_fu_502;
reg   [23:0] tmp_data_1_V_9_fu_506;
reg   [23:0] tmp_data_2_V_9_fu_510;
reg   [23:0] tmp_data_3_V_9_fu_514;
reg   [23:0] tmp_data_0_V_10_fu_518;
reg   [23:0] tmp_data_1_V_10_fu_522;
reg   [23:0] tmp_data_2_V_10_fu_526;
reg   [23:0] tmp_data_3_V_10_fu_530;
reg   [23:0] tmp_data_0_V_11_fu_534;
reg   [23:0] tmp_data_1_V_11_fu_538;
reg   [23:0] tmp_data_2_V_11_fu_542;
reg   [23:0] tmp_data_3_V_11_fu_546;
reg   [23:0] tmp_data_0_V_12_fu_550;
reg   [23:0] tmp_data_1_V_12_fu_554;
reg   [23:0] tmp_data_2_V_12_fu_558;
reg   [23:0] tmp_data_3_V_12_fu_562;
reg   [23:0] tmp_data_0_V_13_fu_566;
reg   [23:0] tmp_data_1_V_13_fu_570;
reg   [23:0] tmp_data_2_V_13_fu_574;
reg   [23:0] tmp_data_3_V_13_fu_578;
reg   [23:0] tmp_data_0_V_14_fu_582;
reg   [23:0] tmp_data_1_V_14_fu_586;
reg   [23:0] tmp_data_2_V_14_fu_590;
reg   [23:0] tmp_data_3_V_14_fu_594;
reg   [23:0] tmp_data_0_V_15_fu_598;
reg   [23:0] tmp_data_1_V_15_fu_602;
reg   [23:0] tmp_data_2_V_15_fu_606;
reg   [23:0] tmp_data_3_V_15_fu_610;
wire    io_acc_block_signal_op323;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_ready),
    .data_0_V_read(tmp_data_0_V_fu_358),
    .data_1_V_read(tmp_data_1_V_fu_362),
    .data_2_V_read(tmp_data_2_V_fu_366),
    .data_3_V_read(tmp_data_3_V_fu_370),
    .data_4_V_read(tmp_data_0_V_1_fu_374),
    .data_5_V_read(tmp_data_1_V_1_fu_378),
    .data_6_V_read(tmp_data_2_V_1_fu_382),
    .data_7_V_read(tmp_data_3_V_1_fu_386),
    .data_8_V_read(tmp_data_0_V_2_fu_390),
    .data_9_V_read(tmp_data_1_V_2_fu_394),
    .data_10_V_read(tmp_data_2_V_2_fu_398),
    .data_11_V_read(tmp_data_3_V_2_fu_402),
    .data_12_V_read(tmp_data_0_V_3_fu_406),
    .data_13_V_read(tmp_data_1_V_3_fu_410),
    .data_14_V_read(tmp_data_2_V_3_fu_414),
    .data_15_V_read(tmp_data_3_V_3_fu_418),
    .data_16_V_read(tmp_data_0_V_4_fu_422),
    .data_17_V_read(tmp_data_1_V_4_fu_426),
    .data_18_V_read(tmp_data_2_V_4_fu_430),
    .data_19_V_read(tmp_data_3_V_4_fu_434),
    .data_20_V_read(tmp_data_0_V_5_fu_438),
    .data_21_V_read(tmp_data_1_V_5_fu_442),
    .data_22_V_read(tmp_data_2_V_5_fu_446),
    .data_23_V_read(tmp_data_3_V_5_fu_450),
    .data_24_V_read(tmp_data_0_V_6_fu_454),
    .data_25_V_read(tmp_data_1_V_6_fu_458),
    .data_26_V_read(tmp_data_2_V_6_fu_462),
    .data_27_V_read(tmp_data_3_V_6_fu_466),
    .data_28_V_read(tmp_data_0_V_7_fu_470),
    .data_29_V_read(tmp_data_1_V_7_fu_474),
    .data_30_V_read(tmp_data_2_V_7_fu_478),
    .data_31_V_read(tmp_data_3_V_7_fu_482),
    .data_32_V_read(tmp_data_0_V_8_fu_486),
    .data_33_V_read(tmp_data_1_V_8_fu_490),
    .data_34_V_read(tmp_data_2_V_8_fu_494),
    .data_35_V_read(tmp_data_3_V_8_fu_498),
    .data_36_V_read(tmp_data_0_V_9_fu_502),
    .data_37_V_read(tmp_data_1_V_9_fu_506),
    .data_38_V_read(tmp_data_2_V_9_fu_510),
    .data_39_V_read(tmp_data_3_V_9_fu_514),
    .data_40_V_read(tmp_data_0_V_10_fu_518),
    .data_41_V_read(tmp_data_1_V_10_fu_522),
    .data_42_V_read(tmp_data_2_V_10_fu_526),
    .data_43_V_read(tmp_data_3_V_10_fu_530),
    .data_44_V_read(tmp_data_0_V_11_fu_534),
    .data_45_V_read(tmp_data_1_V_11_fu_538),
    .data_46_V_read(tmp_data_2_V_11_fu_542),
    .data_47_V_read(tmp_data_3_V_11_fu_546),
    .data_48_V_read(tmp_data_0_V_12_fu_550),
    .data_49_V_read(tmp_data_1_V_12_fu_554),
    .data_50_V_read(tmp_data_2_V_12_fu_558),
    .data_51_V_read(tmp_data_3_V_12_fu_562),
    .data_52_V_read(tmp_data_0_V_13_fu_566),
    .data_53_V_read(tmp_data_1_V_13_fu_570),
    .data_54_V_read(tmp_data_2_V_13_fu_574),
    .data_55_V_read(tmp_data_3_V_13_fu_578),
    .data_56_V_read(tmp_data_0_V_14_fu_582),
    .data_57_V_read(tmp_data_1_V_14_fu_586),
    .data_58_V_read(tmp_data_2_V_14_fu_590),
    .data_59_V_read(tmp_data_3_V_14_fu_594),
    .data_60_V_read(tmp_data_0_V_15_fu_598),
    .data_61_V_read(tmp_data_1_V_15_fu_602),
    .data_62_V_read(tmp_data_2_V_15_fu_606),
    .data_63_V_read(tmp_data_3_V_15_fu_610),
    .ap_return_0(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_759_p2 == 1'd0))) begin
        i_in_0_reg_678 <= i_in_fu_765_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_678 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_0_V16_reg_2148 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_0;
        tmp_data_10_V_reg_2198 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_10;
        tmp_data_11_V_reg_2203 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_11;
        tmp_data_12_V_reg_2208 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_12;
        tmp_data_13_V_reg_2213 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_13;
        tmp_data_14_V_reg_2218 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_14;
        tmp_data_15_V_reg_2223 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_15;
        tmp_data_1_V16_reg_2153 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_1;
        tmp_data_2_V16_reg_2158 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_2;
        tmp_data_3_V16_reg_2163 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_3;
        tmp_data_4_V_reg_2168 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_4;
        tmp_data_5_V_reg_2173 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_5;
        tmp_data_6_V_reg_2178 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_6;
        tmp_data_7_V_reg_2183 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_7;
        tmp_data_8_V_reg_2188 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_8;
        tmp_data_9_V_reg_2193 <= grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_10_fu_518 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_10_fu_522 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_10_fu_526 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_10_fu_530 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_11_fu_534 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_11_fu_538 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_11_fu_542 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_11_fu_546 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_12_fu_550 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_12_fu_554 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_12_fu_558 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_12_fu_562 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_13_fu_566 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_13_fu_570 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_13_fu_574 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_13_fu_578 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_14_fu_582 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_14_fu_586 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_14_fu_590 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_14_fu_594 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_15_fu_598 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_15_fu_602 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_15_fu_606 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_15_fu_610 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_1_fu_374 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_1_fu_378 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_1_fu_382 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_1_fu_386 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_2_fu_390 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_2_fu_394 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_2_fu_398 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_2_fu_402 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_3_fu_406 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_3_fu_410 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_3_fu_414 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_3_fu_418 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_4_fu_422 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_4_fu_426 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_4_fu_430 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_4_fu_434 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_5_fu_438 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_5_fu_442 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_5_fu_446 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_5_fu_450 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_6_fu_454 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_6_fu_458 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_6_fu_462 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_6_fu_466 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_7_fu_470 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_7_fu_474 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_7_fu_478 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_7_fu_482 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_8_fu_486 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_8_fu_490 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_8_fu_494 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_8_fu_498 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_9_fu_502 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_9_fu_506 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_9_fu_510 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_9_fu_514 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1824 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_fu_358 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_fu_362 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_fu_366 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_fu_370 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_759_p2 == 1'd0))) begin
        trunc_ln203_reg_1824 <= trunc_ln203_fu_771_p1;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_759_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_759_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_759_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((io_acc_block_signal_op323 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op166 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op166 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op166 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start = grp_dense_wrapper_ap_fixed_24_16_0_0_0_ap_fixed_24_16_0_0_0_config15_s_fu_689_ap_start_reg;

assign i_in_fu_765_p2 = (i_in_0_reg_678 + 5'd1);

assign icmp_ln36_fu_759_p2 = ((i_in_0_reg_678 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op166 = (data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op323 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V16_reg_2148;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_2198;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_2203;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_2208;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_2213;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_2218;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_2223;

assign res_stream_V_data_1_V_din = tmp_data_1_V16_reg_2153;

assign res_stream_V_data_2_V_din = tmp_data_2_V16_reg_2158;

assign res_stream_V_data_3_V_din = tmp_data_3_V16_reg_2163;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_2168;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_2173;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_2178;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_2183;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_2188;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_2193;

assign start_out = real_start;

assign trunc_ln203_fu_771_p1 = i_in_0_reg_678[3:0];

endmodule //dense_array_ap_fixed_4u_array_ap_fixed_24_16_0_0_0_16u_config15_s
