// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_array_array_ap_fixed_16_16_0_0_0_16u_linear_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        res_V_data_10_V_TDATA,
        res_V_data_10_V_TVALID,
        res_V_data_10_V_TREADY,
        res_V_data_11_V_TDATA,
        res_V_data_11_V_TVALID,
        res_V_data_11_V_TREADY,
        res_V_data_12_V_TDATA,
        res_V_data_12_V_TVALID,
        res_V_data_12_V_TREADY,
        res_V_data_13_V_TDATA,
        res_V_data_13_V_TVALID,
        res_V_data_13_V_TREADY,
        res_V_data_14_V_TDATA,
        res_V_data_14_V_TVALID,
        res_V_data_14_V_TREADY,
        res_V_data_15_V_TDATA,
        res_V_data_15_V_TVALID,
        res_V_data_15_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [23:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [23:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [23:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [23:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [23:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [23:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [23:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [23:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [23:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [23:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [23:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [23:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [23:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [23:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [23:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output  [15:0] res_V_data_10_V_TDATA;
output   res_V_data_10_V_TVALID;
input   res_V_data_10_V_TREADY;
output  [15:0] res_V_data_11_V_TDATA;
output   res_V_data_11_V_TVALID;
input   res_V_data_11_V_TREADY;
output  [15:0] res_V_data_12_V_TDATA;
output   res_V_data_12_V_TVALID;
input   res_V_data_12_V_TREADY;
output  [15:0] res_V_data_13_V_TDATA;
output   res_V_data_13_V_TVALID;
input   res_V_data_13_V_TREADY;
output  [15:0] res_V_data_14_V_TDATA;
output   res_V_data_14_V_TVALID;
input   res_V_data_14_V_TREADY;
output  [15:0] res_V_data_15_V_TDATA;
output   res_V_data_15_V_TVALID;
input   res_V_data_15_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_res_V_data_0_V_U_apdone_blk;
wire    regslice_both_res_V_data_1_V_U_apdone_blk;
wire    regslice_both_res_V_data_2_V_U_apdone_blk;
wire    regslice_both_res_V_data_3_V_U_apdone_blk;
wire    regslice_both_res_V_data_4_V_U_apdone_blk;
wire    regslice_both_res_V_data_5_V_U_apdone_blk;
wire    regslice_both_res_V_data_6_V_U_apdone_blk;
wire    regslice_both_res_V_data_7_V_U_apdone_blk;
wire    regslice_both_res_V_data_8_V_U_apdone_blk;
wire    regslice_both_res_V_data_9_V_U_apdone_blk;
wire    regslice_both_res_V_data_10_V_U_apdone_blk;
wire    regslice_both_res_V_data_11_V_U_apdone_blk;
wire    regslice_both_res_V_data_12_V_U_apdone_blk;
wire    regslice_both_res_V_data_13_V_U_apdone_blk;
wire    regslice_both_res_V_data_14_V_U_apdone_blk;
wire    regslice_both_res_V_data_15_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_TDATA_blk_n;
reg    res_V_data_1_V_TDATA_blk_n;
reg    res_V_data_2_V_TDATA_blk_n;
reg    res_V_data_3_V_TDATA_blk_n;
reg    res_V_data_4_V_TDATA_blk_n;
reg    res_V_data_5_V_TDATA_blk_n;
reg    res_V_data_6_V_TDATA_blk_n;
reg    res_V_data_7_V_TDATA_blk_n;
reg    res_V_data_8_V_TDATA_blk_n;
reg    res_V_data_9_V_TDATA_blk_n;
reg    res_V_data_10_V_TDATA_blk_n;
reg    res_V_data_11_V_TDATA_blk_n;
reg    res_V_data_12_V_TDATA_blk_n;
reg    res_V_data_13_V_TDATA_blk_n;
reg    res_V_data_14_V_TDATA_blk_n;
reg    res_V_data_15_V_TDATA_blk_n;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_2_fu_476_p3;
wire   [15:0] zext_ln415_fu_484_p1;
wire   [15:0] trunc_ln_fu_466_p4;
wire   [15:0] add_ln415_fu_488_p2;
wire   [0:0] tmp_5_fu_520_p3;
wire   [15:0] zext_ln415_1_fu_528_p1;
wire   [15:0] trunc_ln708_1_fu_510_p4;
wire   [15:0] add_ln415_1_fu_532_p2;
wire   [0:0] tmp_8_fu_564_p3;
wire   [15:0] zext_ln415_2_fu_572_p1;
wire   [15:0] trunc_ln708_2_fu_554_p4;
wire   [15:0] add_ln415_2_fu_576_p2;
wire   [0:0] tmp_11_fu_608_p3;
wire   [15:0] zext_ln415_3_fu_616_p1;
wire   [15:0] trunc_ln708_3_fu_598_p4;
wire   [15:0] add_ln415_3_fu_620_p2;
wire   [0:0] tmp_14_fu_652_p3;
wire   [15:0] zext_ln415_4_fu_660_p1;
wire   [15:0] trunc_ln708_4_fu_642_p4;
wire   [15:0] add_ln415_4_fu_664_p2;
wire   [0:0] tmp_17_fu_696_p3;
wire   [15:0] zext_ln415_5_fu_704_p1;
wire   [15:0] trunc_ln708_5_fu_686_p4;
wire   [15:0] add_ln415_5_fu_708_p2;
wire   [0:0] tmp_20_fu_740_p3;
wire   [15:0] zext_ln415_6_fu_748_p1;
wire   [15:0] trunc_ln708_6_fu_730_p4;
wire   [15:0] add_ln415_6_fu_752_p2;
wire   [0:0] tmp_23_fu_784_p3;
wire   [15:0] zext_ln415_7_fu_792_p1;
wire   [15:0] trunc_ln708_7_fu_774_p4;
wire   [15:0] add_ln415_7_fu_796_p2;
wire   [0:0] tmp_26_fu_828_p3;
wire   [15:0] zext_ln415_8_fu_836_p1;
wire   [15:0] trunc_ln708_8_fu_818_p4;
wire   [15:0] add_ln415_8_fu_840_p2;
wire   [0:0] tmp_29_fu_872_p3;
wire   [15:0] zext_ln415_9_fu_880_p1;
wire   [15:0] trunc_ln708_9_fu_862_p4;
wire   [15:0] add_ln415_9_fu_884_p2;
wire   [0:0] tmp_32_fu_916_p3;
wire   [15:0] zext_ln415_10_fu_924_p1;
wire   [15:0] trunc_ln708_s_fu_906_p4;
wire   [15:0] add_ln415_10_fu_928_p2;
wire   [0:0] tmp_35_fu_960_p3;
wire   [15:0] zext_ln415_11_fu_968_p1;
wire   [15:0] trunc_ln708_10_fu_950_p4;
wire   [15:0] add_ln415_11_fu_972_p2;
wire   [0:0] tmp_38_fu_1004_p3;
wire   [15:0] zext_ln415_12_fu_1012_p1;
wire   [15:0] trunc_ln708_11_fu_994_p4;
wire   [15:0] add_ln415_12_fu_1016_p2;
wire   [0:0] tmp_37_fu_986_p3;
wire   [0:0] tmp_39_fu_1022_p3;
wire   [15:0] phitmp_12_fu_1030_p3;
wire   [0:0] tmp_41_fu_1065_p3;
wire   [15:0] zext_ln415_13_fu_1073_p1;
wire   [15:0] trunc_ln708_12_fu_1055_p4;
wire   [15:0] add_ln415_13_fu_1077_p2;
wire   [0:0] tmp_40_fu_1047_p3;
wire   [0:0] tmp_42_fu_1083_p3;
wire   [15:0] phitmp_13_fu_1091_p3;
wire   [0:0] tmp_44_fu_1126_p3;
wire   [15:0] zext_ln415_14_fu_1134_p1;
wire   [15:0] trunc_ln708_13_fu_1116_p4;
wire   [15:0] add_ln415_14_fu_1138_p2;
wire   [0:0] tmp_43_fu_1108_p3;
wire   [0:0] tmp_45_fu_1144_p3;
wire   [15:0] phitmp_14_fu_1152_p3;
wire   [0:0] tmp_47_fu_1187_p3;
wire   [15:0] zext_ln415_15_fu_1195_p1;
wire   [15:0] trunc_ln708_14_fu_1177_p4;
wire   [15:0] add_ln415_15_fu_1199_p2;
wire   [0:0] tmp_46_fu_1169_p3;
wire   [0:0] tmp_48_fu_1205_p3;
wire   [15:0] phitmp_15_fu_1213_p3;
wire   [0:0] tmp_1_fu_458_p3;
wire   [0:0] tmp_3_fu_494_p3;
wire   [15:0] empty_32_fu_1230_p3;
wire   [0:0] tmp_4_fu_502_p3;
wire   [0:0] tmp_6_fu_538_p3;
wire   [15:0] empty_33_fu_1247_p3;
wire   [0:0] tmp_7_fu_546_p3;
wire   [0:0] tmp_9_fu_582_p3;
wire   [15:0] empty_34_fu_1264_p3;
wire   [0:0] tmp_10_fu_590_p3;
wire   [0:0] tmp_12_fu_626_p3;
wire   [15:0] empty_35_fu_1281_p3;
wire   [0:0] tmp_13_fu_634_p3;
wire   [0:0] tmp_15_fu_670_p3;
wire   [15:0] empty_36_fu_1298_p3;
wire   [0:0] tmp_16_fu_678_p3;
wire   [0:0] tmp_18_fu_714_p3;
wire   [15:0] empty_37_fu_1315_p3;
wire   [0:0] tmp_19_fu_722_p3;
wire   [0:0] tmp_21_fu_758_p3;
wire   [15:0] empty_38_fu_1332_p3;
wire   [0:0] tmp_22_fu_766_p3;
wire   [0:0] tmp_24_fu_802_p3;
wire   [15:0] empty_39_fu_1349_p3;
wire   [0:0] tmp_25_fu_810_p3;
wire   [0:0] tmp_27_fu_846_p3;
wire   [15:0] empty_40_fu_1366_p3;
wire   [0:0] tmp_28_fu_854_p3;
wire   [0:0] tmp_30_fu_890_p3;
wire   [15:0] empty_41_fu_1383_p3;
wire   [0:0] tmp_31_fu_898_p3;
wire   [0:0] tmp_33_fu_934_p3;
wire   [15:0] empty_42_fu_1400_p3;
wire   [0:0] tmp_34_fu_942_p3;
wire   [0:0] tmp_36_fu_978_p3;
wire   [15:0] empty_43_fu_1417_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] res_V_data_0_V_TDATA_int;
reg    res_V_data_0_V_TVALID_int;
wire    res_V_data_0_V_TREADY_int;
wire    regslice_both_res_V_data_0_V_U_vld_out;
wire   [15:0] res_V_data_1_V_TDATA_int;
reg    res_V_data_1_V_TVALID_int;
wire    res_V_data_1_V_TREADY_int;
wire    regslice_both_res_V_data_1_V_U_vld_out;
wire   [15:0] res_V_data_2_V_TDATA_int;
reg    res_V_data_2_V_TVALID_int;
wire    res_V_data_2_V_TREADY_int;
wire    regslice_both_res_V_data_2_V_U_vld_out;
wire   [15:0] res_V_data_3_V_TDATA_int;
reg    res_V_data_3_V_TVALID_int;
wire    res_V_data_3_V_TREADY_int;
wire    regslice_both_res_V_data_3_V_U_vld_out;
wire   [15:0] res_V_data_4_V_TDATA_int;
reg    res_V_data_4_V_TVALID_int;
wire    res_V_data_4_V_TREADY_int;
wire    regslice_both_res_V_data_4_V_U_vld_out;
wire   [15:0] res_V_data_5_V_TDATA_int;
reg    res_V_data_5_V_TVALID_int;
wire    res_V_data_5_V_TREADY_int;
wire    regslice_both_res_V_data_5_V_U_vld_out;
wire   [15:0] res_V_data_6_V_TDATA_int;
reg    res_V_data_6_V_TVALID_int;
wire    res_V_data_6_V_TREADY_int;
wire    regslice_both_res_V_data_6_V_U_vld_out;
wire   [15:0] res_V_data_7_V_TDATA_int;
reg    res_V_data_7_V_TVALID_int;
wire    res_V_data_7_V_TREADY_int;
wire    regslice_both_res_V_data_7_V_U_vld_out;
wire   [15:0] res_V_data_8_V_TDATA_int;
reg    res_V_data_8_V_TVALID_int;
wire    res_V_data_8_V_TREADY_int;
wire    regslice_both_res_V_data_8_V_U_vld_out;
wire   [15:0] res_V_data_9_V_TDATA_int;
reg    res_V_data_9_V_TVALID_int;
wire    res_V_data_9_V_TREADY_int;
wire    regslice_both_res_V_data_9_V_U_vld_out;
wire   [15:0] res_V_data_10_V_TDATA_int;
reg    res_V_data_10_V_TVALID_int;
wire    res_V_data_10_V_TREADY_int;
wire    regslice_both_res_V_data_10_V_U_vld_out;
wire   [15:0] res_V_data_11_V_TDATA_int;
reg    res_V_data_11_V_TVALID_int;
wire    res_V_data_11_V_TREADY_int;
wire    regslice_both_res_V_data_11_V_U_vld_out;
wire   [15:0] res_V_data_12_V_TDATA_int;
reg    res_V_data_12_V_TVALID_int;
wire    res_V_data_12_V_TREADY_int;
wire    regslice_both_res_V_data_12_V_U_vld_out;
wire   [15:0] res_V_data_13_V_TDATA_int;
reg    res_V_data_13_V_TVALID_int;
wire    res_V_data_13_V_TREADY_int;
wire    regslice_both_res_V_data_13_V_U_vld_out;
wire   [15:0] res_V_data_14_V_TDATA_int;
reg    res_V_data_14_V_TVALID_int;
wire    res_V_data_14_V_TREADY_int;
wire    regslice_both_res_V_data_14_V_U_vld_out;
wire   [15:0] res_V_data_15_V_TDATA_int;
reg    res_V_data_15_V_TVALID_int;
wire    res_V_data_15_V_TREADY_int;
wire    regslice_both_res_V_data_15_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_0_V_TDATA_int),
    .vld_in(res_V_data_0_V_TVALID_int),
    .ack_in(res_V_data_0_V_TREADY_int),
    .data_out(res_V_data_0_V_TDATA),
    .vld_out(regslice_both_res_V_data_0_V_U_vld_out),
    .ack_out(res_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_1_V_TDATA_int),
    .vld_in(res_V_data_1_V_TVALID_int),
    .ack_in(res_V_data_1_V_TREADY_int),
    .data_out(res_V_data_1_V_TDATA),
    .vld_out(regslice_both_res_V_data_1_V_U_vld_out),
    .ack_out(res_V_data_1_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_2_V_TDATA_int),
    .vld_in(res_V_data_2_V_TVALID_int),
    .ack_in(res_V_data_2_V_TREADY_int),
    .data_out(res_V_data_2_V_TDATA),
    .vld_out(regslice_both_res_V_data_2_V_U_vld_out),
    .ack_out(res_V_data_2_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_3_V_TDATA_int),
    .vld_in(res_V_data_3_V_TVALID_int),
    .ack_in(res_V_data_3_V_TREADY_int),
    .data_out(res_V_data_3_V_TDATA),
    .vld_out(regslice_both_res_V_data_3_V_U_vld_out),
    .ack_out(res_V_data_3_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_3_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_4_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_4_V_TDATA_int),
    .vld_in(res_V_data_4_V_TVALID_int),
    .ack_in(res_V_data_4_V_TREADY_int),
    .data_out(res_V_data_4_V_TDATA),
    .vld_out(regslice_both_res_V_data_4_V_U_vld_out),
    .ack_out(res_V_data_4_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_4_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_5_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_5_V_TDATA_int),
    .vld_in(res_V_data_5_V_TVALID_int),
    .ack_in(res_V_data_5_V_TREADY_int),
    .data_out(res_V_data_5_V_TDATA),
    .vld_out(regslice_both_res_V_data_5_V_U_vld_out),
    .ack_out(res_V_data_5_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_5_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_6_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_6_V_TDATA_int),
    .vld_in(res_V_data_6_V_TVALID_int),
    .ack_in(res_V_data_6_V_TREADY_int),
    .data_out(res_V_data_6_V_TDATA),
    .vld_out(regslice_both_res_V_data_6_V_U_vld_out),
    .ack_out(res_V_data_6_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_6_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_7_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_7_V_TDATA_int),
    .vld_in(res_V_data_7_V_TVALID_int),
    .ack_in(res_V_data_7_V_TREADY_int),
    .data_out(res_V_data_7_V_TDATA),
    .vld_out(regslice_both_res_V_data_7_V_U_vld_out),
    .ack_out(res_V_data_7_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_7_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_8_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_8_V_TDATA_int),
    .vld_in(res_V_data_8_V_TVALID_int),
    .ack_in(res_V_data_8_V_TREADY_int),
    .data_out(res_V_data_8_V_TDATA),
    .vld_out(regslice_both_res_V_data_8_V_U_vld_out),
    .ack_out(res_V_data_8_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_8_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_9_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_9_V_TDATA_int),
    .vld_in(res_V_data_9_V_TVALID_int),
    .ack_in(res_V_data_9_V_TREADY_int),
    .data_out(res_V_data_9_V_TDATA),
    .vld_out(regslice_both_res_V_data_9_V_U_vld_out),
    .ack_out(res_V_data_9_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_9_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_10_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_10_V_TDATA_int),
    .vld_in(res_V_data_10_V_TVALID_int),
    .ack_in(res_V_data_10_V_TREADY_int),
    .data_out(res_V_data_10_V_TDATA),
    .vld_out(regslice_both_res_V_data_10_V_U_vld_out),
    .ack_out(res_V_data_10_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_10_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_11_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_11_V_TDATA_int),
    .vld_in(res_V_data_11_V_TVALID_int),
    .ack_in(res_V_data_11_V_TREADY_int),
    .data_out(res_V_data_11_V_TDATA),
    .vld_out(regslice_both_res_V_data_11_V_U_vld_out),
    .ack_out(res_V_data_11_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_11_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_12_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_12_V_TDATA_int),
    .vld_in(res_V_data_12_V_TVALID_int),
    .ack_in(res_V_data_12_V_TREADY_int),
    .data_out(res_V_data_12_V_TDATA),
    .vld_out(regslice_both_res_V_data_12_V_U_vld_out),
    .ack_out(res_V_data_12_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_12_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_13_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_13_V_TDATA_int),
    .vld_in(res_V_data_13_V_TVALID_int),
    .ack_in(res_V_data_13_V_TREADY_int),
    .data_out(res_V_data_13_V_TDATA),
    .vld_out(regslice_both_res_V_data_13_V_U_vld_out),
    .ack_out(res_V_data_13_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_13_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_14_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_14_V_TDATA_int),
    .vld_in(res_V_data_14_V_TVALID_int),
    .ack_in(res_V_data_14_V_TREADY_int),
    .data_out(res_V_data_14_V_TDATA),
    .vld_out(regslice_both_res_V_data_14_V_U_vld_out),
    .ack_out(res_V_data_14_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_14_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_15_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_15_V_TDATA_int),
    .vld_in(res_V_data_15_V_TVALID_int),
    .ack_in(res_V_data_15_V_TREADY_int),
    .data_out(res_V_data_15_V_TDATA),
    .vld_out(regslice_both_res_V_data_15_V_U_vld_out),
    .ack_out(res_V_data_15_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_15_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY_int;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_10_V_TDATA_blk_n = res_V_data_10_V_TREADY_int;
    end else begin
        res_V_data_10_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_10_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_10_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_11_V_TDATA_blk_n = res_V_data_11_V_TREADY_int;
    end else begin
        res_V_data_11_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_11_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_11_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_12_V_TDATA_blk_n = res_V_data_12_V_TREADY_int;
    end else begin
        res_V_data_12_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_12_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_12_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_13_V_TDATA_blk_n = res_V_data_13_V_TREADY_int;
    end else begin
        res_V_data_13_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_13_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_13_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_14_V_TDATA_blk_n = res_V_data_14_V_TREADY_int;
    end else begin
        res_V_data_14_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_14_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_14_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_15_V_TDATA_blk_n = res_V_data_15_V_TREADY_int;
    end else begin
        res_V_data_15_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_15_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_15_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY_int;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_1_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY_int;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_2_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY_int;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_3_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY_int;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_4_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY_int;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_5_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY_int;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_6_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY_int;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_7_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY_int;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_8_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY_int;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_9_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_928_p2 = (zext_ln415_10_fu_924_p1 + trunc_ln708_s_fu_906_p4);

assign add_ln415_11_fu_972_p2 = (zext_ln415_11_fu_968_p1 + trunc_ln708_10_fu_950_p4);

assign add_ln415_12_fu_1016_p2 = (zext_ln415_12_fu_1012_p1 + trunc_ln708_11_fu_994_p4);

assign add_ln415_13_fu_1077_p2 = (zext_ln415_13_fu_1073_p1 + trunc_ln708_12_fu_1055_p4);

assign add_ln415_14_fu_1138_p2 = (zext_ln415_14_fu_1134_p1 + trunc_ln708_13_fu_1116_p4);

assign add_ln415_15_fu_1199_p2 = (zext_ln415_15_fu_1195_p1 + trunc_ln708_14_fu_1177_p4);

assign add_ln415_1_fu_532_p2 = (zext_ln415_1_fu_528_p1 + trunc_ln708_1_fu_510_p4);

assign add_ln415_2_fu_576_p2 = (zext_ln415_2_fu_572_p1 + trunc_ln708_2_fu_554_p4);

assign add_ln415_3_fu_620_p2 = (zext_ln415_3_fu_616_p1 + trunc_ln708_3_fu_598_p4);

assign add_ln415_4_fu_664_p2 = (zext_ln415_4_fu_660_p1 + trunc_ln708_4_fu_642_p4);

assign add_ln415_5_fu_708_p2 = (zext_ln415_5_fu_704_p1 + trunc_ln708_5_fu_686_p4);

assign add_ln415_6_fu_752_p2 = (zext_ln415_6_fu_748_p1 + trunc_ln708_6_fu_730_p4);

assign add_ln415_7_fu_796_p2 = (zext_ln415_7_fu_792_p1 + trunc_ln708_7_fu_774_p4);

assign add_ln415_8_fu_840_p2 = (zext_ln415_8_fu_836_p1 + trunc_ln708_8_fu_818_p4);

assign add_ln415_9_fu_884_p2 = (zext_ln415_9_fu_880_p1 + trunc_ln708_9_fu_862_p4);

assign add_ln415_fu_488_p2 = (zext_ln415_fu_484_p1 + trunc_ln_fu_466_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (res_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (res_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign empty_32_fu_1230_p3 = ((tmp_1_fu_458_p3[0:0] === 1'b1) ? add_ln415_fu_488_p2 : 16'd32767);

assign empty_33_fu_1247_p3 = ((tmp_4_fu_502_p3[0:0] === 1'b1) ? add_ln415_1_fu_532_p2 : 16'd32767);

assign empty_34_fu_1264_p3 = ((tmp_7_fu_546_p3[0:0] === 1'b1) ? add_ln415_2_fu_576_p2 : 16'd32767);

assign empty_35_fu_1281_p3 = ((tmp_10_fu_590_p3[0:0] === 1'b1) ? add_ln415_3_fu_620_p2 : 16'd32767);

assign empty_36_fu_1298_p3 = ((tmp_13_fu_634_p3[0:0] === 1'b1) ? add_ln415_4_fu_664_p2 : 16'd32767);

assign empty_37_fu_1315_p3 = ((tmp_16_fu_678_p3[0:0] === 1'b1) ? add_ln415_5_fu_708_p2 : 16'd32767);

assign empty_38_fu_1332_p3 = ((tmp_19_fu_722_p3[0:0] === 1'b1) ? add_ln415_6_fu_752_p2 : 16'd32767);

assign empty_39_fu_1349_p3 = ((tmp_22_fu_766_p3[0:0] === 1'b1) ? add_ln415_7_fu_796_p2 : 16'd32767);

assign empty_40_fu_1366_p3 = ((tmp_25_fu_810_p3[0:0] === 1'b1) ? add_ln415_8_fu_840_p2 : 16'd32767);

assign empty_41_fu_1383_p3 = ((tmp_28_fu_854_p3[0:0] === 1'b1) ? add_ln415_9_fu_884_p2 : 16'd32767);

assign empty_42_fu_1400_p3 = ((tmp_31_fu_898_p3[0:0] === 1'b1) ? add_ln415_10_fu_928_p2 : 16'd32767);

assign empty_43_fu_1417_p3 = ((tmp_34_fu_942_p3[0:0] === 1'b1) ? add_ln415_11_fu_972_p2 : 16'd32767);

assign io_acc_block_signal_op3 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign phitmp_12_fu_1030_p3 = ((tmp_37_fu_986_p3[0:0] === 1'b1) ? add_ln415_12_fu_1016_p2 : 16'd32767);

assign phitmp_13_fu_1091_p3 = ((tmp_40_fu_1047_p3[0:0] === 1'b1) ? add_ln415_13_fu_1077_p2 : 16'd32767);

assign phitmp_14_fu_1152_p3 = ((tmp_43_fu_1108_p3[0:0] === 1'b1) ? add_ln415_14_fu_1138_p2 : 16'd32767);

assign phitmp_15_fu_1213_p3 = ((tmp_46_fu_1169_p3[0:0] === 1'b1) ? add_ln415_15_fu_1199_p2 : 16'd32767);

assign res_V_data_0_V_TDATA_int = ((tmp_3_fu_494_p3[0:0] === 1'b1) ? empty_32_fu_1230_p3 : add_ln415_fu_488_p2);

assign res_V_data_0_V_TVALID = regslice_both_res_V_data_0_V_U_vld_out;

assign res_V_data_10_V_TDATA_int = ((tmp_33_fu_934_p3[0:0] === 1'b1) ? empty_42_fu_1400_p3 : add_ln415_10_fu_928_p2);

assign res_V_data_10_V_TVALID = regslice_both_res_V_data_10_V_U_vld_out;

assign res_V_data_11_V_TDATA_int = ((tmp_36_fu_978_p3[0:0] === 1'b1) ? empty_43_fu_1417_p3 : add_ln415_11_fu_972_p2);

assign res_V_data_11_V_TVALID = regslice_both_res_V_data_11_V_U_vld_out;

assign res_V_data_12_V_TDATA_int = ((tmp_39_fu_1022_p3[0:0] === 1'b1) ? phitmp_12_fu_1030_p3 : add_ln415_12_fu_1016_p2);

assign res_V_data_12_V_TVALID = regslice_both_res_V_data_12_V_U_vld_out;

assign res_V_data_13_V_TDATA_int = ((tmp_42_fu_1083_p3[0:0] === 1'b1) ? phitmp_13_fu_1091_p3 : add_ln415_13_fu_1077_p2);

assign res_V_data_13_V_TVALID = regslice_both_res_V_data_13_V_U_vld_out;

assign res_V_data_14_V_TDATA_int = ((tmp_45_fu_1144_p3[0:0] === 1'b1) ? phitmp_14_fu_1152_p3 : add_ln415_14_fu_1138_p2);

assign res_V_data_14_V_TVALID = regslice_both_res_V_data_14_V_U_vld_out;

assign res_V_data_15_V_TDATA_int = ((tmp_48_fu_1205_p3[0:0] === 1'b1) ? phitmp_15_fu_1213_p3 : add_ln415_15_fu_1199_p2);

assign res_V_data_15_V_TVALID = regslice_both_res_V_data_15_V_U_vld_out;

assign res_V_data_1_V_TDATA_int = ((tmp_6_fu_538_p3[0:0] === 1'b1) ? empty_33_fu_1247_p3 : add_ln415_1_fu_532_p2);

assign res_V_data_1_V_TVALID = regslice_both_res_V_data_1_V_U_vld_out;

assign res_V_data_2_V_TDATA_int = ((tmp_9_fu_582_p3[0:0] === 1'b1) ? empty_34_fu_1264_p3 : add_ln415_2_fu_576_p2);

assign res_V_data_2_V_TVALID = regslice_both_res_V_data_2_V_U_vld_out;

assign res_V_data_3_V_TDATA_int = ((tmp_12_fu_626_p3[0:0] === 1'b1) ? empty_35_fu_1281_p3 : add_ln415_3_fu_620_p2);

assign res_V_data_3_V_TVALID = regslice_both_res_V_data_3_V_U_vld_out;

assign res_V_data_4_V_TDATA_int = ((tmp_15_fu_670_p3[0:0] === 1'b1) ? empty_36_fu_1298_p3 : add_ln415_4_fu_664_p2);

assign res_V_data_4_V_TVALID = regslice_both_res_V_data_4_V_U_vld_out;

assign res_V_data_5_V_TDATA_int = ((tmp_18_fu_714_p3[0:0] === 1'b1) ? empty_37_fu_1315_p3 : add_ln415_5_fu_708_p2);

assign res_V_data_5_V_TVALID = regslice_both_res_V_data_5_V_U_vld_out;

assign res_V_data_6_V_TDATA_int = ((tmp_21_fu_758_p3[0:0] === 1'b1) ? empty_38_fu_1332_p3 : add_ln415_6_fu_752_p2);

assign res_V_data_6_V_TVALID = regslice_both_res_V_data_6_V_U_vld_out;

assign res_V_data_7_V_TDATA_int = ((tmp_24_fu_802_p3[0:0] === 1'b1) ? empty_39_fu_1349_p3 : add_ln415_7_fu_796_p2);

assign res_V_data_7_V_TVALID = regslice_both_res_V_data_7_V_U_vld_out;

assign res_V_data_8_V_TDATA_int = ((tmp_27_fu_846_p3[0:0] === 1'b1) ? empty_40_fu_1366_p3 : add_ln415_8_fu_840_p2);

assign res_V_data_8_V_TVALID = regslice_both_res_V_data_8_V_U_vld_out;

assign res_V_data_9_V_TDATA_int = ((tmp_30_fu_890_p3[0:0] === 1'b1) ? empty_41_fu_1383_p3 : add_ln415_9_fu_884_p2);

assign res_V_data_9_V_TVALID = regslice_both_res_V_data_9_V_U_vld_out;

assign tmp_10_fu_590_p3 = data_V_data_3_V_dout[32'd23];

assign tmp_11_fu_608_p3 = data_V_data_3_V_dout[32'd7];

assign tmp_12_fu_626_p3 = add_ln415_3_fu_620_p2[32'd15];

assign tmp_13_fu_634_p3 = data_V_data_4_V_dout[32'd23];

assign tmp_14_fu_652_p3 = data_V_data_4_V_dout[32'd7];

assign tmp_15_fu_670_p3 = add_ln415_4_fu_664_p2[32'd15];

assign tmp_16_fu_678_p3 = data_V_data_5_V_dout[32'd23];

assign tmp_17_fu_696_p3 = data_V_data_5_V_dout[32'd7];

assign tmp_18_fu_714_p3 = add_ln415_5_fu_708_p2[32'd15];

assign tmp_19_fu_722_p3 = data_V_data_6_V_dout[32'd23];

assign tmp_1_fu_458_p3 = data_V_data_0_V_dout[32'd23];

assign tmp_20_fu_740_p3 = data_V_data_6_V_dout[32'd7];

assign tmp_21_fu_758_p3 = add_ln415_6_fu_752_p2[32'd15];

assign tmp_22_fu_766_p3 = data_V_data_7_V_dout[32'd23];

assign tmp_23_fu_784_p3 = data_V_data_7_V_dout[32'd7];

assign tmp_24_fu_802_p3 = add_ln415_7_fu_796_p2[32'd15];

assign tmp_25_fu_810_p3 = data_V_data_8_V_dout[32'd23];

assign tmp_26_fu_828_p3 = data_V_data_8_V_dout[32'd7];

assign tmp_27_fu_846_p3 = add_ln415_8_fu_840_p2[32'd15];

assign tmp_28_fu_854_p3 = data_V_data_9_V_dout[32'd23];

assign tmp_29_fu_872_p3 = data_V_data_9_V_dout[32'd7];

assign tmp_2_fu_476_p3 = data_V_data_0_V_dout[32'd7];

assign tmp_30_fu_890_p3 = add_ln415_9_fu_884_p2[32'd15];

assign tmp_31_fu_898_p3 = data_V_data_10_V_dout[32'd23];

assign tmp_32_fu_916_p3 = data_V_data_10_V_dout[32'd7];

assign tmp_33_fu_934_p3 = add_ln415_10_fu_928_p2[32'd15];

assign tmp_34_fu_942_p3 = data_V_data_11_V_dout[32'd23];

assign tmp_35_fu_960_p3 = data_V_data_11_V_dout[32'd7];

assign tmp_36_fu_978_p3 = add_ln415_11_fu_972_p2[32'd15];

assign tmp_37_fu_986_p3 = data_V_data_12_V_dout[32'd23];

assign tmp_38_fu_1004_p3 = data_V_data_12_V_dout[32'd7];

assign tmp_39_fu_1022_p3 = add_ln415_12_fu_1016_p2[32'd15];

assign tmp_3_fu_494_p3 = add_ln415_fu_488_p2[32'd15];

assign tmp_40_fu_1047_p3 = data_V_data_13_V_dout[32'd23];

assign tmp_41_fu_1065_p3 = data_V_data_13_V_dout[32'd7];

assign tmp_42_fu_1083_p3 = add_ln415_13_fu_1077_p2[32'd15];

assign tmp_43_fu_1108_p3 = data_V_data_14_V_dout[32'd23];

assign tmp_44_fu_1126_p3 = data_V_data_14_V_dout[32'd7];

assign tmp_45_fu_1144_p3 = add_ln415_14_fu_1138_p2[32'd15];

assign tmp_46_fu_1169_p3 = data_V_data_15_V_dout[32'd23];

assign tmp_47_fu_1187_p3 = data_V_data_15_V_dout[32'd7];

assign tmp_48_fu_1205_p3 = add_ln415_15_fu_1199_p2[32'd15];

assign tmp_4_fu_502_p3 = data_V_data_1_V_dout[32'd23];

assign tmp_5_fu_520_p3 = data_V_data_1_V_dout[32'd7];

assign tmp_6_fu_538_p3 = add_ln415_1_fu_532_p2[32'd15];

assign tmp_7_fu_546_p3 = data_V_data_2_V_dout[32'd23];

assign tmp_8_fu_564_p3 = data_V_data_2_V_dout[32'd7];

assign tmp_9_fu_582_p3 = add_ln415_2_fu_576_p2[32'd15];

assign trunc_ln708_10_fu_950_p4 = {{data_V_data_11_V_dout[23:8]}};

assign trunc_ln708_11_fu_994_p4 = {{data_V_data_12_V_dout[23:8]}};

assign trunc_ln708_12_fu_1055_p4 = {{data_V_data_13_V_dout[23:8]}};

assign trunc_ln708_13_fu_1116_p4 = {{data_V_data_14_V_dout[23:8]}};

assign trunc_ln708_14_fu_1177_p4 = {{data_V_data_15_V_dout[23:8]}};

assign trunc_ln708_1_fu_510_p4 = {{data_V_data_1_V_dout[23:8]}};

assign trunc_ln708_2_fu_554_p4 = {{data_V_data_2_V_dout[23:8]}};

assign trunc_ln708_3_fu_598_p4 = {{data_V_data_3_V_dout[23:8]}};

assign trunc_ln708_4_fu_642_p4 = {{data_V_data_4_V_dout[23:8]}};

assign trunc_ln708_5_fu_686_p4 = {{data_V_data_5_V_dout[23:8]}};

assign trunc_ln708_6_fu_730_p4 = {{data_V_data_6_V_dout[23:8]}};

assign trunc_ln708_7_fu_774_p4 = {{data_V_data_7_V_dout[23:8]}};

assign trunc_ln708_8_fu_818_p4 = {{data_V_data_8_V_dout[23:8]}};

assign trunc_ln708_9_fu_862_p4 = {{data_V_data_9_V_dout[23:8]}};

assign trunc_ln708_s_fu_906_p4 = {{data_V_data_10_V_dout[23:8]}};

assign trunc_ln_fu_466_p4 = {{data_V_data_0_V_dout[23:8]}};

assign zext_ln415_10_fu_924_p1 = tmp_32_fu_916_p3;

assign zext_ln415_11_fu_968_p1 = tmp_35_fu_960_p3;

assign zext_ln415_12_fu_1012_p1 = tmp_38_fu_1004_p3;

assign zext_ln415_13_fu_1073_p1 = tmp_41_fu_1065_p3;

assign zext_ln415_14_fu_1134_p1 = tmp_44_fu_1126_p3;

assign zext_ln415_15_fu_1195_p1 = tmp_47_fu_1187_p3;

assign zext_ln415_1_fu_528_p1 = tmp_5_fu_520_p3;

assign zext_ln415_2_fu_572_p1 = tmp_8_fu_564_p3;

assign zext_ln415_3_fu_616_p1 = tmp_11_fu_608_p3;

assign zext_ln415_4_fu_660_p1 = tmp_14_fu_652_p3;

assign zext_ln415_5_fu_704_p1 = tmp_17_fu_696_p3;

assign zext_ln415_6_fu_748_p1 = tmp_20_fu_740_p3;

assign zext_ln415_7_fu_792_p1 = tmp_23_fu_784_p3;

assign zext_ln415_8_fu_836_p1 = tmp_26_fu_828_p3;

assign zext_ln415_9_fu_880_p1 = tmp_29_fu_872_p3;

assign zext_ln415_fu_484_p1 = tmp_2_fu_476_p3;

endmodule //linear_array_array_ap_fixed_16_16_0_0_0_16u_linear_config17_s
