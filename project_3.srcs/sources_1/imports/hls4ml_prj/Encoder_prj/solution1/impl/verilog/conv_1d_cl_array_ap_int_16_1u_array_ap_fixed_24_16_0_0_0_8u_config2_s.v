// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1d_cl_array_ap_int_16_1u_array_ap_fixed_24_16_0_0_0_8u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_V_dout,
        data_V_data_V_empty_n,
        data_V_data_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_V_dout;
input   data_V_data_V_empty_n;
output   data_V_data_V_read;
output  [23:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [23:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [23:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [23:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [23:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [23:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [23:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [23:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [15:0] kernel_data_V_3_2;
reg   [15:0] kernel_data_V_3_1;
reg   [31:0] sX;
reg   [31:0] pX;
reg   [15:0] kernel_data_V_3_0;
wire   [1:0] w2_V_address0;
reg    w2_V_ce0;
wire   [62:0] w2_V_q0;
reg    data_V_data_V_blk_n;
wire    ap_CS_fsm_state2;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state9;
reg   [0:0] and_ln360_reg_2412;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [1:0] in_index21_reg_332;
reg  signed [23:0] tmp_data_0_V_1419_reg_343;
reg  signed [23:0] tmp_data_1_V_1117_reg_354;
reg  signed [23:0] tmp_data_2_V_1115_reg_365;
reg  signed [23:0] tmp_data_3_V_1113_reg_376;
reg  signed [23:0] tmp_data_4_V_811_reg_387;
reg  signed [23:0] tmp_data_5_V_89_reg_398;
reg  signed [23:0] tmp_data_6_V_87_reg_409;
reg  signed [23:0] tmp_data_7_V_85_reg_420;
reg   [15:0] tmp_data_0_V_reg_2370;
reg   [15:0] kernel_data_V_3_2_load_reg_2375;
wire   [6:0] i_iw_1_fu_449_p2;
reg   [6:0] i_iw_1_reg_2380;
wire   [1:0] i_iw_fu_461_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] sX_load_reg_2396;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln360_fu_499_p2;
reg   [0:0] icmp_ln360_reg_2401;
reg   [31:0] pX_load_reg_2406;
wire   [0:0] and_ln360_fu_525_p2;
wire   [0:0] icmp_ln7_fu_531_p2;
reg   [0:0] icmp_ln7_reg_2416;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln7_reg_2416_pp1_iter1_reg;
wire   [0:0] icmp_ln7_1_fu_537_p2;
reg   [0:0] icmp_ln7_1_reg_2421;
reg   [0:0] icmp_ln7_1_reg_2421_pp1_iter1_reg;
wire   [1:0] in_index_fu_548_p2;
reg   [1:0] in_index_reg_2431;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln43_fu_554_p2;
reg   [0:0] icmp_ln43_reg_2436;
reg   [0:0] icmp_ln43_reg_2436_pp1_iter1_reg;
reg   [0:0] icmp_ln43_reg_2436_pp1_iter2_reg;
wire   [7:0] trunc_ln56_fu_560_p1;
reg  signed [7:0] trunc_ln56_reg_2440;
reg  signed [7:0] tmp_513_reg_2445;
reg  signed [7:0] tmp_514_reg_2450;
reg  signed [7:0] tmp_515_reg_2455;
reg  signed [7:0] tmp_516_reg_2460;
reg  signed [7:0] tmp_517_reg_2465;
reg  signed [7:0] tmp_518_reg_2470;
reg  signed [6:0] tmp_519_reg_2475;
wire  signed [23:0] mul_ln1118_fu_2314_p2;
reg  signed [23:0] mul_ln1118_reg_2480;
reg   [0:0] tmp_4097_reg_2487;
wire  signed [23:0] mul_ln1118_512_fu_2321_p2;
reg  signed [23:0] mul_ln1118_512_reg_2494;
reg   [0:0] tmp_4102_reg_2501;
wire  signed [23:0] mul_ln1118_513_fu_2328_p2;
reg  signed [23:0] mul_ln1118_513_reg_2508;
reg   [0:0] tmp_4107_reg_2515;
wire  signed [23:0] mul_ln1118_514_fu_2335_p2;
reg  signed [23:0] mul_ln1118_514_reg_2522;
reg   [0:0] tmp_4112_reg_2529;
wire  signed [23:0] mul_ln1118_515_fu_2342_p2;
reg  signed [23:0] mul_ln1118_515_reg_2536;
reg   [0:0] tmp_4117_reg_2543;
wire  signed [23:0] mul_ln1118_516_fu_2349_p2;
reg  signed [23:0] mul_ln1118_516_reg_2550;
reg   [0:0] tmp_4122_reg_2557;
wire  signed [23:0] mul_ln1118_517_fu_2356_p2;
reg  signed [23:0] mul_ln1118_517_reg_2564;
reg   [0:0] tmp_4127_reg_2571;
wire  signed [22:0] mul_ln1118_518_fu_2363_p2;
reg  signed [22:0] mul_ln1118_518_reg_2578;
reg   [0:0] tmp_4132_reg_2584;
wire   [23:0] tmp_data_0_V_19_fu_922_p3;
reg   [23:0] tmp_data_0_V_19_reg_2591;
reg    ap_enable_reg_pp1_iter3;
wire   [23:0] tmp_data_1_V_fu_1112_p3;
reg   [23:0] tmp_data_1_V_reg_2597;
wire   [23:0] tmp_data_2_V_fu_1302_p3;
reg   [23:0] tmp_data_2_V_reg_2603;
wire   [23:0] tmp_data_3_V_fu_1492_p3;
reg   [23:0] tmp_data_3_V_reg_2609;
wire   [23:0] tmp_data_4_V_fu_1682_p3;
reg   [23:0] tmp_data_4_V_reg_2615;
wire   [23:0] tmp_data_5_V_fu_1872_p3;
reg   [23:0] tmp_data_5_V_reg_2621;
wire   [23:0] tmp_data_6_V_fu_2062_p3;
reg   [23:0] tmp_data_6_V_reg_2627;
wire   [23:0] tmp_data_7_V_fu_2259_p3;
reg   [23:0] tmp_data_7_V_reg_2633;
wire    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [6:0] i_iw_0_i22_reg_309;
reg    ap_block_state1;
wire    io_acc_block_signal_op359;
reg    ap_block_state9;
wire   [0:0] icmp_ln64_fu_2308_p2;
reg   [1:0] i_iw_0_i_i_i_reg_321;
wire   [0:0] icmp_ln166_fu_455_p2;
reg   [1:0] ap_phi_mux_in_index21_phi_fu_336_p4;
wire    ap_block_pp1_stage0;
wire   [31:0] select_ln391_fu_2288_p3;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_434_p4;
wire   [0:0] icmp_ln384_fu_2267_p2;
wire   [63:0] zext_ln56_fu_543_p1;
wire   [15:0] select_ln180_fu_471_p3;
wire   [0:0] trunc_ln172_fu_467_p1;
wire   [31:0] add_ln389_fu_2272_p2;
wire   [30:0] tmp_4096_fu_509_p4;
wire   [0:0] icmp_ln360_1_fu_519_p2;
wire   [15:0] select_ln7_fu_638_p3;
wire  signed [15:0] select_ln7_1_fu_645_p3;
wire   [23:0] shl_ln731_fu_740_p2;
wire   [23:0] or_ln785_fu_745_p2;
wire   [0:0] tmp_4098_fu_750_p3;
wire   [0:0] xor_ln785_fu_758_p2;
wire   [23:0] and_ln786_fu_769_p2;
wire   [0:0] tmp_4099_fu_774_p3;
wire   [0:0] xor_ln786_1024_fu_782_p2;
wire   [0:0] and_ln786_1536_fu_788_p2;
wire   [0:0] and_ln785_fu_763_p2;
wire   [0:0] xor_ln340_1032_fu_799_p2;
wire   [0:0] or_ln340_2064_fu_804_p2;
wire   [0:0] or_ln340_fu_793_p2;
wire   [0:0] or_ln340_2048_fu_810_p2;
wire   [23:0] select_ln340_fu_816_p3;
wire   [23:0] select_ln388_fu_824_p3;
wire  signed [23:0] select_ln340_2048_fu_832_p3;
wire  signed [24:0] sext_ln703_fu_840_p1;
wire  signed [24:0] sext_ln703_1024_fu_844_p1;
wire   [24:0] add_ln1192_fu_848_p2;
wire   [23:0] acc_0_V_fu_862_p2;
wire   [0:0] tmp_4101_fu_868_p3;
wire   [0:0] tmp_4100_fu_854_p3;
wire   [0:0] xor_ln786_fu_876_p2;
wire   [0:0] xor_ln340_512_fu_894_p2;
wire   [0:0] xor_ln340_1024_fu_888_p2;
wire   [0:0] and_ln786_1537_fu_882_p2;
wire   [0:0] or_ln340_2049_fu_900_p2;
wire   [23:0] select_ln340_1024_fu_906_p3;
wire   [23:0] acc_0_V_63_fu_914_p3;
wire   [23:0] shl_ln731_1_fu_930_p2;
wire   [23:0] or_ln785_1_fu_935_p2;
wire   [0:0] tmp_4103_fu_940_p3;
wire   [0:0] xor_ln785_1_fu_948_p2;
wire   [23:0] and_ln786_1_fu_959_p2;
wire   [0:0] tmp_4104_fu_964_p3;
wire   [0:0] xor_ln786_1025_fu_972_p2;
wire   [0:0] and_ln786_1538_fu_978_p2;
wire   [0:0] and_ln785_512_fu_953_p2;
wire   [0:0] xor_ln340_fu_989_p2;
wire   [0:0] or_ln340_2065_fu_994_p2;
wire   [0:0] or_ln340_1_fu_983_p2;
wire   [0:0] or_ln340_2050_fu_1000_p2;
wire   [23:0] select_ln340_1_fu_1006_p3;
wire   [23:0] select_ln388_1_fu_1014_p3;
wire  signed [23:0] select_ln340_2050_fu_1022_p3;
wire  signed [24:0] sext_ln703_1025_fu_1030_p1;
wire  signed [24:0] sext_ln703_1026_fu_1034_p1;
wire   [24:0] add_ln1192_512_fu_1038_p2;
wire   [23:0] acc_1_V_fu_1052_p2;
wire   [0:0] tmp_4106_fu_1058_p3;
wire   [0:0] tmp_4105_fu_1044_p3;
wire   [0:0] xor_ln786_1_fu_1066_p2;
wire   [0:0] xor_ln340_513_fu_1084_p2;
wire   [0:0] xor_ln340_1025_fu_1078_p2;
wire   [0:0] and_ln786_1539_fu_1072_p2;
wire   [0:0] or_ln340_2051_fu_1090_p2;
wire   [23:0] select_ln340_1025_fu_1096_p3;
wire   [23:0] acc_1_V_63_fu_1104_p3;
wire   [23:0] shl_ln731_2_fu_1120_p2;
wire   [23:0] or_ln785_218_fu_1125_p2;
wire   [0:0] tmp_4108_fu_1130_p3;
wire   [0:0] xor_ln785_2_fu_1138_p2;
wire   [23:0] and_ln786_2_fu_1149_p2;
wire   [0:0] tmp_4109_fu_1154_p3;
wire   [0:0] xor_ln786_1026_fu_1162_p2;
wire   [0:0] and_ln786_1540_fu_1168_p2;
wire   [0:0] and_ln785_513_fu_1143_p2;
wire   [0:0] xor_ln340_1033_fu_1179_p2;
wire   [0:0] or_ln340_2066_fu_1184_p2;
wire   [0:0] or_ln340_2_fu_1173_p2;
wire   [0:0] or_ln340_2052_fu_1190_p2;
wire   [23:0] select_ln340_2_fu_1196_p3;
wire   [23:0] select_ln388_2_fu_1204_p3;
wire  signed [23:0] select_ln340_2052_fu_1212_p3;
wire  signed [24:0] sext_ln703_1027_fu_1220_p1;
wire  signed [24:0] sext_ln703_1028_fu_1224_p1;
wire   [24:0] add_ln1192_513_fu_1228_p2;
wire   [23:0] acc_2_V_fu_1242_p2;
wire   [0:0] tmp_4111_fu_1248_p3;
wire   [0:0] tmp_4110_fu_1234_p3;
wire   [0:0] xor_ln786_2_fu_1256_p2;
wire   [0:0] xor_ln340_514_fu_1274_p2;
wire   [0:0] xor_ln340_1026_fu_1268_p2;
wire   [0:0] and_ln786_1541_fu_1262_p2;
wire   [0:0] or_ln340_2053_fu_1280_p2;
wire   [23:0] select_ln340_1026_fu_1286_p3;
wire   [23:0] acc_2_V_63_fu_1294_p3;
wire   [23:0] shl_ln731_3_fu_1310_p2;
wire   [23:0] or_ln785_3_fu_1315_p2;
wire   [0:0] tmp_4113_fu_1320_p3;
wire   [0:0] xor_ln785_319_fu_1328_p2;
wire   [23:0] and_ln786_3_fu_1339_p2;
wire   [0:0] tmp_4114_fu_1344_p3;
wire   [0:0] xor_ln786_1027_fu_1352_p2;
wire   [0:0] and_ln786_1542_fu_1358_p2;
wire   [0:0] and_ln785_514_fu_1333_p2;
wire   [0:0] xor_ln340_1034_fu_1369_p2;
wire   [0:0] or_ln340_2067_fu_1374_p2;
wire   [0:0] or_ln340_3_fu_1363_p2;
wire   [0:0] or_ln340_2054_fu_1380_p2;
wire   [23:0] select_ln340_3_fu_1386_p3;
wire   [23:0] select_ln388_3_fu_1394_p3;
wire  signed [23:0] select_ln340_2054_fu_1402_p3;
wire  signed [24:0] sext_ln703_1029_fu_1410_p1;
wire  signed [24:0] sext_ln703_1030_fu_1414_p1;
wire   [24:0] add_ln1192_514_fu_1418_p2;
wire   [23:0] acc_3_V_fu_1432_p2;
wire   [0:0] tmp_4116_fu_1438_p3;
wire   [0:0] tmp_4115_fu_1424_p3;
wire   [0:0] xor_ln786_3_fu_1446_p2;
wire   [0:0] xor_ln340_515_fu_1464_p2;
wire   [0:0] xor_ln340_1027_fu_1458_p2;
wire   [0:0] and_ln786_1543_fu_1452_p2;
wire   [0:0] or_ln340_2055_fu_1470_p2;
wire   [23:0] select_ln340_1027_fu_1476_p3;
wire   [23:0] acc_3_V_63_fu_1484_p3;
wire   [23:0] shl_ln731_4_fu_1500_p2;
wire   [23:0] or_ln785_4_fu_1505_p2;
wire   [0:0] tmp_4118_fu_1510_p3;
wire   [0:0] xor_ln785_4_fu_1518_p2;
wire   [23:0] and_ln786_4_fu_1529_p2;
wire   [0:0] tmp_4119_fu_1534_p3;
wire   [0:0] xor_ln786_1028_fu_1542_p2;
wire   [0:0] and_ln786_1544_fu_1548_p2;
wire   [0:0] and_ln785_515_fu_1523_p2;
wire   [0:0] xor_ln340_1035_fu_1559_p2;
wire   [0:0] or_ln340_2068_fu_1564_p2;
wire   [0:0] or_ln340_420_fu_1553_p2;
wire   [0:0] or_ln340_2056_fu_1570_p2;
wire   [23:0] select_ln340_4_fu_1576_p3;
wire   [23:0] select_ln388_4_fu_1584_p3;
wire  signed [23:0] select_ln340_2056_fu_1592_p3;
wire  signed [24:0] sext_ln703_1031_fu_1600_p1;
wire  signed [24:0] sext_ln703_1032_fu_1604_p1;
wire   [24:0] add_ln1192_515_fu_1608_p2;
wire   [23:0] acc_4_V_fu_1622_p2;
wire   [0:0] tmp_4121_fu_1628_p3;
wire   [0:0] tmp_4120_fu_1614_p3;
wire   [0:0] xor_ln786_4_fu_1636_p2;
wire   [0:0] xor_ln340_516_fu_1654_p2;
wire   [0:0] xor_ln340_1028_fu_1648_p2;
wire   [0:0] and_ln786_1545_fu_1642_p2;
wire   [0:0] or_ln340_2057_fu_1660_p2;
wire   [23:0] select_ln340_1028_fu_1666_p3;
wire   [23:0] acc_4_V_63_fu_1674_p3;
wire   [23:0] shl_ln731_5_fu_1690_p2;
wire   [23:0] or_ln785_5_fu_1695_p2;
wire   [0:0] tmp_4123_fu_1700_p3;
wire   [0:0] xor_ln785_5_fu_1708_p2;
wire   [23:0] and_ln786_5_fu_1719_p2;
wire   [0:0] tmp_4124_fu_1724_p3;
wire   [0:0] xor_ln786_1029_fu_1732_p2;
wire   [0:0] and_ln786_1546_fu_1738_p2;
wire   [0:0] and_ln785_516_fu_1713_p2;
wire   [0:0] xor_ln340_1036_fu_1749_p2;
wire   [0:0] or_ln340_2069_fu_1754_p2;
wire   [0:0] or_ln340_522_fu_1743_p2;
wire   [0:0] or_ln340_2058_fu_1760_p2;
wire   [23:0] select_ln340_5_fu_1766_p3;
wire   [23:0] select_ln388_5_fu_1774_p3;
wire  signed [23:0] select_ln340_2058_fu_1782_p3;
wire  signed [24:0] sext_ln703_1033_fu_1790_p1;
wire  signed [24:0] sext_ln703_1034_fu_1794_p1;
wire   [24:0] add_ln1192_516_fu_1798_p2;
wire   [23:0] acc_5_V_fu_1812_p2;
wire   [0:0] tmp_4126_fu_1818_p3;
wire   [0:0] tmp_4125_fu_1804_p3;
wire   [0:0] xor_ln786_5_fu_1826_p2;
wire   [0:0] xor_ln340_517_fu_1844_p2;
wire   [0:0] xor_ln340_1029_fu_1838_p2;
wire   [0:0] and_ln786_1547_fu_1832_p2;
wire   [0:0] or_ln340_2059_fu_1850_p2;
wire   [23:0] select_ln340_1029_fu_1856_p3;
wire   [23:0] acc_5_V_63_fu_1864_p3;
wire   [23:0] shl_ln731_6_fu_1880_p2;
wire   [23:0] or_ln785_6_fu_1885_p2;
wire   [0:0] tmp_4128_fu_1890_p3;
wire   [0:0] xor_ln785_6_fu_1898_p2;
wire   [23:0] and_ln786_6_fu_1909_p2;
wire   [0:0] tmp_4129_fu_1914_p3;
wire   [0:0] xor_ln786_1030_fu_1922_p2;
wire   [0:0] and_ln786_1548_fu_1928_p2;
wire   [0:0] and_ln785_517_fu_1903_p2;
wire   [0:0] xor_ln340_1037_fu_1939_p2;
wire   [0:0] or_ln340_2070_fu_1944_p2;
wire   [0:0] or_ln340_6_fu_1933_p2;
wire   [0:0] or_ln340_2060_fu_1950_p2;
wire   [23:0] select_ln340_6_fu_1956_p3;
wire   [23:0] select_ln388_6_fu_1964_p3;
wire  signed [23:0] select_ln340_2060_fu_1972_p3;
wire  signed [24:0] sext_ln703_1035_fu_1980_p1;
wire  signed [24:0] sext_ln703_1036_fu_1984_p1;
wire   [24:0] add_ln1192_517_fu_1988_p2;
wire   [23:0] acc_6_V_fu_2002_p2;
wire   [0:0] tmp_4131_fu_2008_p3;
wire   [0:0] tmp_4130_fu_1994_p3;
wire   [0:0] xor_ln786_6_fu_2016_p2;
wire   [0:0] xor_ln340_518_fu_2034_p2;
wire   [0:0] xor_ln340_1030_fu_2028_p2;
wire   [0:0] and_ln786_1549_fu_2022_p2;
wire   [0:0] or_ln340_2061_fu_2040_p2;
wire   [23:0] select_ln340_1030_fu_2046_p3;
wire   [23:0] acc_6_V_63_fu_2054_p3;
wire   [23:0] shl_ln731_7_fu_2073_p3;
wire  signed [23:0] sext_ln1118_515_fu_2070_p1;
wire   [23:0] or_ln785_7_fu_2080_p2;
wire   [0:0] tmp_4133_fu_2086_p3;
wire   [0:0] xor_ln785_7_fu_2094_p2;
wire   [23:0] and_ln786_7_fu_2105_p2;
wire   [0:0] tmp_4134_fu_2111_p3;
wire   [0:0] xor_ln786_1031_fu_2119_p2;
wire   [0:0] and_ln786_1550_fu_2125_p2;
wire   [0:0] and_ln785_518_fu_2099_p2;
wire   [0:0] xor_ln340_1038_fu_2136_p2;
wire   [0:0] or_ln340_2071_fu_2141_p2;
wire   [0:0] or_ln340_7_fu_2130_p2;
wire   [0:0] or_ln340_2062_fu_2147_p2;
wire   [23:0] select_ln340_7_fu_2153_p3;
wire   [23:0] select_ln388_7_fu_2161_p3;
wire  signed [23:0] select_ln340_2062_fu_2169_p3;
wire  signed [24:0] sext_ln703_1037_fu_2177_p1;
wire  signed [24:0] sext_ln703_1038_fu_2181_p1;
wire   [24:0] add_ln1192_518_fu_2185_p2;
wire   [23:0] acc_7_V_fu_2199_p2;
wire   [0:0] tmp_4136_fu_2205_p3;
wire   [0:0] tmp_4135_fu_2191_p3;
wire   [0:0] xor_ln786_7_fu_2213_p2;
wire   [0:0] xor_ln340_519_fu_2231_p2;
wire   [0:0] xor_ln340_1031_fu_2225_p2;
wire   [0:0] and_ln786_1551_fu_2219_p2;
wire   [0:0] or_ln340_2063_fu_2237_p2;
wire   [23:0] select_ln340_1031_fu_2243_p3;
wire   [23:0] acc_7_V_63_fu_2251_p3;
wire   [31:0] add_ln391_fu_2283_p2;
wire  signed [15:0] mul_ln1118_fu_2314_p0;
wire  signed [23:0] sext_ln1116_fu_652_p1;
wire  signed [15:0] mul_ln1118_512_fu_2321_p0;
wire  signed [15:0] mul_ln1118_513_fu_2328_p0;
wire  signed [15:0] mul_ln1118_514_fu_2335_p0;
wire  signed [15:0] mul_ln1118_515_fu_2342_p0;
wire  signed [15:0] mul_ln1118_516_fu_2349_p0;
wire  signed [15:0] mul_ln1118_517_fu_2356_p0;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_286;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 kernel_data_V_3_2 = 16'd0;
#0 kernel_data_V_3_1 = 16'd0;
#0 sX = 32'd0;
#0 pX = 32'd0;
#0 kernel_data_V_3_0 = 16'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

conv_1d_cl_array_ap_int_16_1u_array_ap_fixed_24_16_0_0_0_8u_config2_s_w2_V #(
    .DataWidth( 63 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U4(
    .din0(mul_ln1118_fu_2314_p0),
    .din1(trunc_ln56_reg_2440),
    .dout(mul_ln1118_fu_2314_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U5(
    .din0(mul_ln1118_512_fu_2321_p0),
    .din1(tmp_513_reg_2445),
    .dout(mul_ln1118_512_fu_2321_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U6(
    .din0(mul_ln1118_513_fu_2328_p0),
    .din1(tmp_514_reg_2450),
    .dout(mul_ln1118_513_fu_2328_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U7(
    .din0(mul_ln1118_514_fu_2335_p0),
    .din1(tmp_515_reg_2455),
    .dout(mul_ln1118_514_fu_2335_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U8(
    .din0(mul_ln1118_515_fu_2342_p0),
    .din1(tmp_516_reg_2460),
    .dout(mul_ln1118_515_fu_2342_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U9(
    .din0(mul_ln1118_516_fu_2349_p0),
    .din1(tmp_517_reg_2465),
    .dout(mul_ln1118_516_fu_2349_p2)
);

Encoder_mul_mul_16s_8s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Encoder_mul_mul_16s_8s_24_1_1_U10(
    .din0(mul_ln1118_517_fu_2356_p0),
    .din1(tmp_518_reg_2470),
    .dout(mul_ln1118_517_fu_2356_p2)
);

Encoder_mul_mul_16s_7s_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 23 ))
Encoder_mul_mul_16s_7s_23_1_1_U11(
    .din0(select_ln7_1_fu_645_p3),
    .din1(tmp_519_reg_2475),
    .dout(mul_ln1118_518_fu_2363_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln64_fu_2308_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln43_fu_554_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (icmp_ln64_fu_2308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_iw_0_i22_reg_309 <= i_iw_1_reg_2380;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_iw_0_i22_reg_309 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_iw_0_i_i_i_reg_321 <= i_iw_fu_461_p2;
    end else if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_iw_0_i_i_i_reg_321 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln43_reg_2436 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_index21_reg_332 <= in_index_reg_2431;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        in_index21_reg_332 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_286)) begin
        if ((icmp_ln384_fu_2267_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln384_fu_2267_p2 == 1'd0)) begin
            pX <= add_ln389_fu_2272_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_0_V_1419_reg_343 <= tmp_data_0_V_19_fu_922_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_0_V_1419_reg_343 <= 24'd16777206;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_1_V_1117_reg_354 <= tmp_data_1_V_fu_1112_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_1_V_1117_reg_354 <= 24'd16777178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_2_V_1115_reg_365 <= tmp_data_2_V_fu_1302_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_2_V_1115_reg_365 <= 24'd16777178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_3_V_1113_reg_376 <= tmp_data_3_V_fu_1492_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_3_V_1113_reg_376 <= 24'd16777206;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_4_V_811_reg_387 <= tmp_data_4_V_fu_1682_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_4_V_811_reg_387 <= 24'd16777182;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_5_V_89_reg_398 <= tmp_data_5_V_fu_1872_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_5_V_89_reg_398 <= 24'd8;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_6_V_87_reg_409 <= tmp_data_6_V_fu_2062_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_6_V_87_reg_409 <= 24'd16777186;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln43_reg_2436_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_7_V_85_reg_420 <= tmp_data_7_V_fu_2259_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
        tmp_data_7_V_85_reg_420 <= 24'd16777214;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln360_reg_2412 <= and_ln360_fu_525_p2;
        icmp_ln360_reg_2401 <= icmp_ln360_fu_499_p2;
        kernel_data_V_3_2 <= tmp_data_0_V_reg_2370;
        pX_load_reg_2406 <= pX;
        sX_load_reg_2396 <= sX;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_iw_1_reg_2380 <= i_iw_1_fu_449_p2;
        kernel_data_V_3_2_load_reg_2375 <= kernel_data_V_3_2;
        tmp_data_0_V_reg_2370 <= data_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln43_reg_2436 <= icmp_ln43_fu_554_p2;
        icmp_ln43_reg_2436_pp1_iter1_reg <= icmp_ln43_reg_2436;
        icmp_ln7_1_reg_2421 <= icmp_ln7_1_fu_537_p2;
        icmp_ln7_1_reg_2421_pp1_iter1_reg <= icmp_ln7_1_reg_2421;
        icmp_ln7_reg_2416 <= icmp_ln7_fu_531_p2;
        icmp_ln7_reg_2416_pp1_iter1_reg <= icmp_ln7_reg_2416;
        tmp_513_reg_2445 <= {{w2_V_q0[15:8]}};
        tmp_514_reg_2450 <= {{w2_V_q0[23:16]}};
        tmp_515_reg_2455 <= {{w2_V_q0[31:24]}};
        tmp_516_reg_2460 <= {{w2_V_q0[39:32]}};
        tmp_517_reg_2465 <= {{w2_V_q0[47:40]}};
        tmp_518_reg_2470 <= {{w2_V_q0[55:48]}};
        tmp_519_reg_2475 <= {{w2_V_q0[62:56]}};
        trunc_ln56_reg_2440 <= trunc_ln56_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln43_reg_2436_pp1_iter2_reg <= icmp_ln43_reg_2436_pp1_iter1_reg;
        mul_ln1118_512_reg_2494 <= mul_ln1118_512_fu_2321_p2;
        mul_ln1118_513_reg_2508 <= mul_ln1118_513_fu_2328_p2;
        mul_ln1118_514_reg_2522 <= mul_ln1118_514_fu_2335_p2;
        mul_ln1118_515_reg_2536 <= mul_ln1118_515_fu_2342_p2;
        mul_ln1118_516_reg_2550 <= mul_ln1118_516_fu_2349_p2;
        mul_ln1118_517_reg_2564 <= mul_ln1118_517_fu_2356_p2;
        mul_ln1118_518_reg_2578 <= mul_ln1118_518_fu_2363_p2;
        mul_ln1118_reg_2480 <= mul_ln1118_fu_2314_p2;
        tmp_4097_reg_2487 <= mul_ln1118_fu_2314_p2[32'd23];
        tmp_4102_reg_2501 <= mul_ln1118_512_fu_2321_p2[32'd23];
        tmp_4107_reg_2515 <= mul_ln1118_513_fu_2328_p2[32'd23];
        tmp_4112_reg_2529 <= mul_ln1118_514_fu_2335_p2[32'd23];
        tmp_4117_reg_2543 <= mul_ln1118_515_fu_2342_p2[32'd23];
        tmp_4122_reg_2557 <= mul_ln1118_516_fu_2349_p2[32'd23];
        tmp_4127_reg_2571 <= mul_ln1118_517_fu_2356_p2[32'd23];
        tmp_4132_reg_2584 <= mul_ln1118_518_fu_2363_p2[32'd22];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_index_reg_2431 <= in_index_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln172_fu_467_p1 == 1'd0) & (icmp_ln166_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_data_V_3_0 <= select_ln180_fu_471_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (trunc_ln172_fu_467_p1 == 1'd1))) begin
        kernel_data_V_3_1 <= select_ln180_fu_471_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9))) begin
        sX <= ap_phi_mux_storemerge_i_i_phi_fu_434_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_data_0_V_19_reg_2591 <= tmp_data_0_V_19_fu_922_p3;
        tmp_data_1_V_reg_2597 <= tmp_data_1_V_fu_1112_p3;
        tmp_data_2_V_reg_2603 <= tmp_data_2_V_fu_1302_p3;
        tmp_data_3_V_reg_2609 <= tmp_data_3_V_fu_1492_p3;
        tmp_data_4_V_reg_2615 <= tmp_data_4_V_fu_1682_p3;
        tmp_data_5_V_reg_2621 <= tmp_data_5_V_fu_1872_p3;
        tmp_data_6_V_reg_2627 <= tmp_data_6_V_fu_2062_p3;
        tmp_data_7_V_reg_2633 <= tmp_data_7_V_fu_2259_p3;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln64_fu_2308_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln43_reg_2436 == 1'd0))) begin
        ap_phi_mux_in_index21_phi_fu_336_p4 = in_index_reg_2431;
    end else begin
        ap_phi_mux_in_index21_phi_fu_336_p4 = in_index21_reg_332;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        if ((icmp_ln384_fu_2267_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_434_p4 = 32'd0;
        end else if ((icmp_ln384_fu_2267_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_434_p4 = select_ln391_fu_2288_p3;
        end else begin
            ap_phi_mux_storemerge_i_i_phi_fu_434_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_434_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_V_blk_n = data_V_data_V_empty_n;
    end else begin
        data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_data_V_read = 1'b1;
    end else begin
        data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln64_fu_2308_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln360_reg_2412))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data_V_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln166_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln360_fu_525_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln64_fu_2308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (icmp_ln64_fu_2308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_63_fu_914_p3 = ((and_ln786_1537_fu_882_p2[0:0] === 1'b1) ? 24'd8388608 : acc_0_V_fu_862_p2);

assign acc_0_V_fu_862_p2 = ($signed(select_ln340_2048_fu_832_p3) + $signed(tmp_data_0_V_1419_reg_343));

assign acc_1_V_63_fu_1104_p3 = ((and_ln786_1539_fu_1072_p2[0:0] === 1'b1) ? 24'd8388608 : acc_1_V_fu_1052_p2);

assign acc_1_V_fu_1052_p2 = ($signed(select_ln340_2050_fu_1022_p3) + $signed(tmp_data_1_V_1117_reg_354));

assign acc_2_V_63_fu_1294_p3 = ((and_ln786_1541_fu_1262_p2[0:0] === 1'b1) ? 24'd8388608 : acc_2_V_fu_1242_p2);

assign acc_2_V_fu_1242_p2 = ($signed(select_ln340_2052_fu_1212_p3) + $signed(tmp_data_2_V_1115_reg_365));

assign acc_3_V_63_fu_1484_p3 = ((and_ln786_1543_fu_1452_p2[0:0] === 1'b1) ? 24'd8388608 : acc_3_V_fu_1432_p2);

assign acc_3_V_fu_1432_p2 = ($signed(select_ln340_2054_fu_1402_p3) + $signed(tmp_data_3_V_1113_reg_376));

assign acc_4_V_63_fu_1674_p3 = ((and_ln786_1545_fu_1642_p2[0:0] === 1'b1) ? 24'd8388608 : acc_4_V_fu_1622_p2);

assign acc_4_V_fu_1622_p2 = ($signed(select_ln340_2056_fu_1592_p3) + $signed(tmp_data_4_V_811_reg_387));

assign acc_5_V_63_fu_1864_p3 = ((and_ln786_1547_fu_1832_p2[0:0] === 1'b1) ? 24'd8388608 : acc_5_V_fu_1812_p2);

assign acc_5_V_fu_1812_p2 = ($signed(select_ln340_2058_fu_1782_p3) + $signed(tmp_data_5_V_89_reg_398));

assign acc_6_V_63_fu_2054_p3 = ((and_ln786_1549_fu_2022_p2[0:0] === 1'b1) ? 24'd8388608 : acc_6_V_fu_2002_p2);

assign acc_6_V_fu_2002_p2 = ($signed(select_ln340_2060_fu_1972_p3) + $signed(tmp_data_6_V_87_reg_409));

assign acc_7_V_63_fu_2251_p3 = ((and_ln786_1551_fu_2219_p2[0:0] === 1'b1) ? 24'd8388608 : acc_7_V_fu_2199_p2);

assign acc_7_V_fu_2199_p2 = ($signed(select_ln340_2062_fu_2169_p3) + $signed(tmp_data_7_V_85_reg_420));

assign add_ln1192_512_fu_1038_p2 = ($signed(sext_ln703_1025_fu_1030_p1) + $signed(sext_ln703_1026_fu_1034_p1));

assign add_ln1192_513_fu_1228_p2 = ($signed(sext_ln703_1027_fu_1220_p1) + $signed(sext_ln703_1028_fu_1224_p1));

assign add_ln1192_514_fu_1418_p2 = ($signed(sext_ln703_1029_fu_1410_p1) + $signed(sext_ln703_1030_fu_1414_p1));

assign add_ln1192_515_fu_1608_p2 = ($signed(sext_ln703_1031_fu_1600_p1) + $signed(sext_ln703_1032_fu_1604_p1));

assign add_ln1192_516_fu_1798_p2 = ($signed(sext_ln703_1033_fu_1790_p1) + $signed(sext_ln703_1034_fu_1794_p1));

assign add_ln1192_517_fu_1988_p2 = ($signed(sext_ln703_1035_fu_1980_p1) + $signed(sext_ln703_1036_fu_1984_p1));

assign add_ln1192_518_fu_2185_p2 = ($signed(sext_ln703_1037_fu_2177_p1) + $signed(sext_ln703_1038_fu_2181_p1));

assign add_ln1192_fu_848_p2 = ($signed(sext_ln703_fu_840_p1) + $signed(sext_ln703_1024_fu_844_p1));

assign add_ln389_fu_2272_p2 = (pX_load_reg_2406 + 32'd1);

assign add_ln391_fu_2283_p2 = (sX_load_reg_2396 + 32'd1);

assign and_ln360_fu_525_p2 = (icmp_ln360_fu_499_p2 & icmp_ln360_1_fu_519_p2);

assign and_ln785_512_fu_953_p2 = (xor_ln785_1_fu_948_p2 & tmp_4103_fu_940_p3);

assign and_ln785_513_fu_1143_p2 = (xor_ln785_2_fu_1138_p2 & tmp_4108_fu_1130_p3);

assign and_ln785_514_fu_1333_p2 = (xor_ln785_319_fu_1328_p2 & tmp_4113_fu_1320_p3);

assign and_ln785_515_fu_1523_p2 = (xor_ln785_4_fu_1518_p2 & tmp_4118_fu_1510_p3);

assign and_ln785_516_fu_1713_p2 = (xor_ln785_5_fu_1708_p2 & tmp_4123_fu_1700_p3);

assign and_ln785_517_fu_1903_p2 = (xor_ln785_6_fu_1898_p2 & tmp_4128_fu_1890_p3);

assign and_ln785_518_fu_2099_p2 = (xor_ln785_7_fu_2094_p2 & tmp_4133_fu_2086_p3);

assign and_ln785_fu_763_p2 = (xor_ln785_fu_758_p2 & tmp_4098_fu_750_p3);

assign and_ln786_1536_fu_788_p2 = (xor_ln786_1024_fu_782_p2 & tmp_4097_reg_2487);

assign and_ln786_1537_fu_882_p2 = (xor_ln786_fu_876_p2 & tmp_4100_fu_854_p3);

assign and_ln786_1538_fu_978_p2 = (xor_ln786_1025_fu_972_p2 & tmp_4102_reg_2501);

assign and_ln786_1539_fu_1072_p2 = (xor_ln786_1_fu_1066_p2 & tmp_4105_fu_1044_p3);

assign and_ln786_1540_fu_1168_p2 = (xor_ln786_1026_fu_1162_p2 & tmp_4107_reg_2515);

assign and_ln786_1541_fu_1262_p2 = (xor_ln786_2_fu_1256_p2 & tmp_4110_fu_1234_p3);

assign and_ln786_1542_fu_1358_p2 = (xor_ln786_1027_fu_1352_p2 & tmp_4112_reg_2529);

assign and_ln786_1543_fu_1452_p2 = (xor_ln786_3_fu_1446_p2 & tmp_4115_fu_1424_p3);

assign and_ln786_1544_fu_1548_p2 = (xor_ln786_1028_fu_1542_p2 & tmp_4117_reg_2543);

assign and_ln786_1545_fu_1642_p2 = (xor_ln786_4_fu_1636_p2 & tmp_4120_fu_1614_p3);

assign and_ln786_1546_fu_1738_p2 = (xor_ln786_1029_fu_1732_p2 & tmp_4122_reg_2557);

assign and_ln786_1547_fu_1832_p2 = (xor_ln786_5_fu_1826_p2 & tmp_4125_fu_1804_p3);

assign and_ln786_1548_fu_1928_p2 = (xor_ln786_1030_fu_1922_p2 & tmp_4127_reg_2571);

assign and_ln786_1549_fu_2022_p2 = (xor_ln786_6_fu_2016_p2 & tmp_4130_fu_1994_p3);

assign and_ln786_1550_fu_2125_p2 = (xor_ln786_1031_fu_2119_p2 & tmp_4132_reg_2584);

assign and_ln786_1551_fu_2219_p2 = (xor_ln786_7_fu_2213_p2 & tmp_4135_fu_2191_p3);

assign and_ln786_1_fu_959_p2 = (shl_ln731_1_fu_930_p2 & mul_ln1118_512_reg_2494);

assign and_ln786_2_fu_1149_p2 = (shl_ln731_2_fu_1120_p2 & mul_ln1118_513_reg_2508);

assign and_ln786_3_fu_1339_p2 = (shl_ln731_3_fu_1310_p2 & mul_ln1118_514_reg_2522);

assign and_ln786_4_fu_1529_p2 = (shl_ln731_4_fu_1500_p2 & mul_ln1118_515_reg_2536);

assign and_ln786_5_fu_1719_p2 = (shl_ln731_5_fu_1690_p2 & mul_ln1118_516_reg_2550);

assign and_ln786_6_fu_1909_p2 = (shl_ln731_6_fu_1880_p2 & mul_ln1118_517_reg_2564);

assign and_ln786_7_fu_2105_p2 = (shl_ln731_7_fu_2073_p3 & sext_ln1118_515_fu_2070_p1);

assign and_ln786_fu_769_p2 = (shl_ln731_fu_740_p2 & mul_ln1118_reg_2480);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9 = ((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412));
end

always @ (*) begin
    ap_condition_286 = (~((io_acc_block_signal_op359 == 1'b0) & (1'd1 == and_ln360_reg_2412)) & (1'b1 == ap_CS_fsm_state9));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_iw_1_fu_449_p2 = (i_iw_0_i22_reg_309 + 7'd1);

assign i_iw_fu_461_p2 = (i_iw_0_i_i_i_reg_321 + 2'd1);

assign icmp_ln166_fu_455_p2 = ((i_iw_0_i_i_i_reg_321 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln360_1_fu_519_p2 = (($signed(tmp_4096_fu_509_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln360_fu_499_p2 = ((sX == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_2267_p2 = ((pX_load_reg_2406 == 32'd65) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_554_p2 = ((ap_phi_mux_in_index21_phi_fu_336_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_2308_p2 = ((i_iw_0_i22_reg_309 == 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_537_p2 = ((ap_phi_mux_in_index21_phi_fu_336_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_531_p2 = ((ap_phi_mux_in_index21_phi_fu_336_p4 == 2'd0) ? 1'b1 : 1'b0);

assign in_index_fu_548_p2 = (2'd1 + ap_phi_mux_in_index21_phi_fu_336_p4);

assign io_acc_block_signal_op359 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_512_fu_2321_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_513_fu_2328_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_514_fu_2335_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_515_fu_2342_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_516_fu_2349_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_517_fu_2356_p0 = sext_ln1116_fu_652_p1;

assign mul_ln1118_fu_2314_p0 = sext_ln1116_fu_652_p1;

assign or_ln340_1_fu_983_p2 = (and_ln786_1538_fu_978_p2 | and_ln785_512_fu_953_p2);

assign or_ln340_2048_fu_810_p2 = (or_ln340_2064_fu_804_p2 | and_ln785_fu_763_p2);

assign or_ln340_2049_fu_900_p2 = (xor_ln340_512_fu_894_p2 | tmp_4101_fu_868_p3);

assign or_ln340_2050_fu_1000_p2 = (or_ln340_2065_fu_994_p2 | and_ln785_512_fu_953_p2);

assign or_ln340_2051_fu_1090_p2 = (xor_ln340_513_fu_1084_p2 | tmp_4106_fu_1058_p3);

assign or_ln340_2052_fu_1190_p2 = (or_ln340_2066_fu_1184_p2 | and_ln785_513_fu_1143_p2);

assign or_ln340_2053_fu_1280_p2 = (xor_ln340_514_fu_1274_p2 | tmp_4111_fu_1248_p3);

assign or_ln340_2054_fu_1380_p2 = (or_ln340_2067_fu_1374_p2 | and_ln785_514_fu_1333_p2);

assign or_ln340_2055_fu_1470_p2 = (xor_ln340_515_fu_1464_p2 | tmp_4116_fu_1438_p3);

assign or_ln340_2056_fu_1570_p2 = (or_ln340_2068_fu_1564_p2 | and_ln785_515_fu_1523_p2);

assign or_ln340_2057_fu_1660_p2 = (xor_ln340_516_fu_1654_p2 | tmp_4121_fu_1628_p3);

assign or_ln340_2058_fu_1760_p2 = (or_ln340_2069_fu_1754_p2 | and_ln785_516_fu_1713_p2);

assign or_ln340_2059_fu_1850_p2 = (xor_ln340_517_fu_1844_p2 | tmp_4126_fu_1818_p3);

assign or_ln340_2060_fu_1950_p2 = (or_ln340_2070_fu_1944_p2 | and_ln785_517_fu_1903_p2);

assign or_ln340_2061_fu_2040_p2 = (xor_ln340_518_fu_2034_p2 | tmp_4131_fu_2008_p3);

assign or_ln340_2062_fu_2147_p2 = (or_ln340_2071_fu_2141_p2 | and_ln785_518_fu_2099_p2);

assign or_ln340_2063_fu_2237_p2 = (xor_ln340_519_fu_2231_p2 | tmp_4136_fu_2205_p3);

assign or_ln340_2064_fu_804_p2 = (xor_ln340_1032_fu_799_p2 | tmp_4099_fu_774_p3);

assign or_ln340_2065_fu_994_p2 = (xor_ln340_fu_989_p2 | tmp_4104_fu_964_p3);

assign or_ln340_2066_fu_1184_p2 = (xor_ln340_1033_fu_1179_p2 | tmp_4109_fu_1154_p3);

assign or_ln340_2067_fu_1374_p2 = (xor_ln340_1034_fu_1369_p2 | tmp_4114_fu_1344_p3);

assign or_ln340_2068_fu_1564_p2 = (xor_ln340_1035_fu_1559_p2 | tmp_4119_fu_1534_p3);

assign or_ln340_2069_fu_1754_p2 = (xor_ln340_1036_fu_1749_p2 | tmp_4124_fu_1724_p3);

assign or_ln340_2070_fu_1944_p2 = (xor_ln340_1037_fu_1939_p2 | tmp_4129_fu_1914_p3);

assign or_ln340_2071_fu_2141_p2 = (xor_ln340_1038_fu_2136_p2 | tmp_4134_fu_2111_p3);

assign or_ln340_2_fu_1173_p2 = (and_ln786_1540_fu_1168_p2 | and_ln785_513_fu_1143_p2);

assign or_ln340_3_fu_1363_p2 = (and_ln786_1542_fu_1358_p2 | and_ln785_514_fu_1333_p2);

assign or_ln340_420_fu_1553_p2 = (and_ln786_1544_fu_1548_p2 | and_ln785_515_fu_1523_p2);

assign or_ln340_522_fu_1743_p2 = (and_ln786_1546_fu_1738_p2 | and_ln785_516_fu_1713_p2);

assign or_ln340_6_fu_1933_p2 = (and_ln786_1548_fu_1928_p2 | and_ln785_517_fu_1903_p2);

assign or_ln340_7_fu_2130_p2 = (and_ln786_1550_fu_2125_p2 | and_ln785_518_fu_2099_p2);

assign or_ln340_fu_793_p2 = (and_ln786_1536_fu_788_p2 | and_ln785_fu_763_p2);

assign or_ln785_1_fu_935_p2 = (shl_ln731_1_fu_930_p2 | mul_ln1118_512_reg_2494);

assign or_ln785_218_fu_1125_p2 = (shl_ln731_2_fu_1120_p2 | mul_ln1118_513_reg_2508);

assign or_ln785_3_fu_1315_p2 = (shl_ln731_3_fu_1310_p2 | mul_ln1118_514_reg_2522);

assign or_ln785_4_fu_1505_p2 = (shl_ln731_4_fu_1500_p2 | mul_ln1118_515_reg_2536);

assign or_ln785_5_fu_1695_p2 = (shl_ln731_5_fu_1690_p2 | mul_ln1118_516_reg_2550);

assign or_ln785_6_fu_1885_p2 = (shl_ln731_6_fu_1880_p2 | mul_ln1118_517_reg_2564);

assign or_ln785_7_fu_2080_p2 = (shl_ln731_7_fu_2073_p3 | sext_ln1118_515_fu_2070_p1);

assign or_ln785_fu_745_p2 = (shl_ln731_fu_740_p2 | mul_ln1118_reg_2480);

assign res_V_data_0_V_din = tmp_data_0_V_19_reg_2591;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2597;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2603;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2609;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2615;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2621;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2627;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2633;

assign select_ln180_fu_471_p3 = ((trunc_ln172_fu_467_p1[0:0] === 1'b1) ? kernel_data_V_3_2_load_reg_2375 : kernel_data_V_3_1);

assign select_ln340_1024_fu_906_p3 = ((xor_ln340_1024_fu_888_p2[0:0] === 1'b1) ? 24'd8388607 : acc_0_V_fu_862_p2);

assign select_ln340_1025_fu_1096_p3 = ((xor_ln340_1025_fu_1078_p2[0:0] === 1'b1) ? 24'd8388607 : acc_1_V_fu_1052_p2);

assign select_ln340_1026_fu_1286_p3 = ((xor_ln340_1026_fu_1268_p2[0:0] === 1'b1) ? 24'd8388607 : acc_2_V_fu_1242_p2);

assign select_ln340_1027_fu_1476_p3 = ((xor_ln340_1027_fu_1458_p2[0:0] === 1'b1) ? 24'd8388607 : acc_3_V_fu_1432_p2);

assign select_ln340_1028_fu_1666_p3 = ((xor_ln340_1028_fu_1648_p2[0:0] === 1'b1) ? 24'd8388607 : acc_4_V_fu_1622_p2);

assign select_ln340_1029_fu_1856_p3 = ((xor_ln340_1029_fu_1838_p2[0:0] === 1'b1) ? 24'd8388607 : acc_5_V_fu_1812_p2);

assign select_ln340_1030_fu_2046_p3 = ((xor_ln340_1030_fu_2028_p2[0:0] === 1'b1) ? 24'd8388607 : acc_6_V_fu_2002_p2);

assign select_ln340_1031_fu_2243_p3 = ((xor_ln340_1031_fu_2225_p2[0:0] === 1'b1) ? 24'd8388607 : acc_7_V_fu_2199_p2);

assign select_ln340_1_fu_1006_p3 = ((or_ln340_1_fu_983_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_1_fu_930_p2);

assign select_ln340_2048_fu_832_p3 = ((or_ln340_2048_fu_810_p2[0:0] === 1'b1) ? select_ln340_fu_816_p3 : select_ln388_fu_824_p3);

assign select_ln340_2050_fu_1022_p3 = ((or_ln340_2050_fu_1000_p2[0:0] === 1'b1) ? select_ln340_1_fu_1006_p3 : select_ln388_1_fu_1014_p3);

assign select_ln340_2052_fu_1212_p3 = ((or_ln340_2052_fu_1190_p2[0:0] === 1'b1) ? select_ln340_2_fu_1196_p3 : select_ln388_2_fu_1204_p3);

assign select_ln340_2054_fu_1402_p3 = ((or_ln340_2054_fu_1380_p2[0:0] === 1'b1) ? select_ln340_3_fu_1386_p3 : select_ln388_3_fu_1394_p3);

assign select_ln340_2056_fu_1592_p3 = ((or_ln340_2056_fu_1570_p2[0:0] === 1'b1) ? select_ln340_4_fu_1576_p3 : select_ln388_4_fu_1584_p3);

assign select_ln340_2058_fu_1782_p3 = ((or_ln340_2058_fu_1760_p2[0:0] === 1'b1) ? select_ln340_5_fu_1766_p3 : select_ln388_5_fu_1774_p3);

assign select_ln340_2060_fu_1972_p3 = ((or_ln340_2060_fu_1950_p2[0:0] === 1'b1) ? select_ln340_6_fu_1956_p3 : select_ln388_6_fu_1964_p3);

assign select_ln340_2062_fu_2169_p3 = ((or_ln340_2062_fu_2147_p2[0:0] === 1'b1) ? select_ln340_7_fu_2153_p3 : select_ln388_7_fu_2161_p3);

assign select_ln340_2_fu_1196_p3 = ((or_ln340_2_fu_1173_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_2_fu_1120_p2);

assign select_ln340_3_fu_1386_p3 = ((or_ln340_3_fu_1363_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_3_fu_1310_p2);

assign select_ln340_4_fu_1576_p3 = ((or_ln340_420_fu_1553_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_4_fu_1500_p2);

assign select_ln340_5_fu_1766_p3 = ((or_ln340_522_fu_1743_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_5_fu_1690_p2);

assign select_ln340_6_fu_1956_p3 = ((or_ln340_6_fu_1933_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_6_fu_1880_p2);

assign select_ln340_7_fu_2153_p3 = ((or_ln340_7_fu_2130_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_7_fu_2073_p3);

assign select_ln340_fu_816_p3 = ((or_ln340_fu_793_p2[0:0] === 1'b1) ? 24'd8388607 : shl_ln731_fu_740_p2);

assign select_ln388_1_fu_1014_p3 = ((and_ln786_1538_fu_978_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_1_fu_930_p2);

assign select_ln388_2_fu_1204_p3 = ((and_ln786_1540_fu_1168_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_2_fu_1120_p2);

assign select_ln388_3_fu_1394_p3 = ((and_ln786_1542_fu_1358_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_3_fu_1310_p2);

assign select_ln388_4_fu_1584_p3 = ((and_ln786_1544_fu_1548_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_4_fu_1500_p2);

assign select_ln388_5_fu_1774_p3 = ((and_ln786_1546_fu_1738_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_5_fu_1690_p2);

assign select_ln388_6_fu_1964_p3 = ((and_ln786_1548_fu_1928_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_6_fu_1880_p2);

assign select_ln388_7_fu_2161_p3 = ((and_ln786_1550_fu_2125_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_7_fu_2073_p3);

assign select_ln388_fu_824_p3 = ((and_ln786_1536_fu_788_p2[0:0] === 1'b1) ? 24'd8388608 : shl_ln731_fu_740_p2);

assign select_ln391_fu_2288_p3 = ((icmp_ln360_reg_2401[0:0] === 1'b1) ? 32'd2 : add_ln391_fu_2283_p2);

assign select_ln7_1_fu_645_p3 = ((icmp_ln7_1_reg_2421_pp1_iter1_reg[0:0] === 1'b1) ? kernel_data_V_3_1 : select_ln7_fu_638_p3);

assign select_ln7_fu_638_p3 = ((icmp_ln7_reg_2416_pp1_iter1_reg[0:0] === 1'b1) ? kernel_data_V_3_0 : kernel_data_V_3_2);

assign sext_ln1116_fu_652_p1 = select_ln7_1_fu_645_p3;

assign sext_ln1118_515_fu_2070_p1 = mul_ln1118_518_reg_2578;

assign sext_ln703_1024_fu_844_p1 = select_ln340_2048_fu_832_p3;

assign sext_ln703_1025_fu_1030_p1 = tmp_data_1_V_1117_reg_354;

assign sext_ln703_1026_fu_1034_p1 = select_ln340_2050_fu_1022_p3;

assign sext_ln703_1027_fu_1220_p1 = tmp_data_2_V_1115_reg_365;

assign sext_ln703_1028_fu_1224_p1 = select_ln340_2052_fu_1212_p3;

assign sext_ln703_1029_fu_1410_p1 = tmp_data_3_V_1113_reg_376;

assign sext_ln703_1030_fu_1414_p1 = select_ln340_2054_fu_1402_p3;

assign sext_ln703_1031_fu_1600_p1 = tmp_data_4_V_811_reg_387;

assign sext_ln703_1032_fu_1604_p1 = select_ln340_2056_fu_1592_p3;

assign sext_ln703_1033_fu_1790_p1 = tmp_data_5_V_89_reg_398;

assign sext_ln703_1034_fu_1794_p1 = select_ln340_2058_fu_1782_p3;

assign sext_ln703_1035_fu_1980_p1 = tmp_data_6_V_87_reg_409;

assign sext_ln703_1036_fu_1984_p1 = select_ln340_2060_fu_1972_p3;

assign sext_ln703_1037_fu_2177_p1 = tmp_data_7_V_85_reg_420;

assign sext_ln703_1038_fu_2181_p1 = select_ln340_2062_fu_2169_p3;

assign sext_ln703_fu_840_p1 = tmp_data_0_V_1419_reg_343;

assign shl_ln731_1_fu_930_p2 = mul_ln1118_512_reg_2494 << 24'd1;

assign shl_ln731_2_fu_1120_p2 = mul_ln1118_513_reg_2508 << 24'd1;

assign shl_ln731_3_fu_1310_p2 = mul_ln1118_514_reg_2522 << 24'd1;

assign shl_ln731_4_fu_1500_p2 = mul_ln1118_515_reg_2536 << 24'd1;

assign shl_ln731_5_fu_1690_p2 = mul_ln1118_516_reg_2550 << 24'd1;

assign shl_ln731_6_fu_1880_p2 = mul_ln1118_517_reg_2564 << 24'd1;

assign shl_ln731_7_fu_2073_p3 = {{mul_ln1118_518_reg_2578}, {1'd0}};

assign shl_ln731_fu_740_p2 = mul_ln1118_reg_2480 << 24'd1;

assign start_out = real_start;

assign tmp_4096_fu_509_p4 = {{pX[31:1]}};

assign tmp_4098_fu_750_p3 = or_ln785_fu_745_p2[32'd23];

assign tmp_4099_fu_774_p3 = and_ln786_fu_769_p2[32'd23];

assign tmp_4100_fu_854_p3 = add_ln1192_fu_848_p2[32'd24];

assign tmp_4101_fu_868_p3 = acc_0_V_fu_862_p2[32'd23];

assign tmp_4103_fu_940_p3 = or_ln785_1_fu_935_p2[32'd23];

assign tmp_4104_fu_964_p3 = and_ln786_1_fu_959_p2[32'd23];

assign tmp_4105_fu_1044_p3 = add_ln1192_512_fu_1038_p2[32'd24];

assign tmp_4106_fu_1058_p3 = acc_1_V_fu_1052_p2[32'd23];

assign tmp_4108_fu_1130_p3 = or_ln785_218_fu_1125_p2[32'd23];

assign tmp_4109_fu_1154_p3 = and_ln786_2_fu_1149_p2[32'd23];

assign tmp_4110_fu_1234_p3 = add_ln1192_513_fu_1228_p2[32'd24];

assign tmp_4111_fu_1248_p3 = acc_2_V_fu_1242_p2[32'd23];

assign tmp_4113_fu_1320_p3 = or_ln785_3_fu_1315_p2[32'd23];

assign tmp_4114_fu_1344_p3 = and_ln786_3_fu_1339_p2[32'd23];

assign tmp_4115_fu_1424_p3 = add_ln1192_514_fu_1418_p2[32'd24];

assign tmp_4116_fu_1438_p3 = acc_3_V_fu_1432_p2[32'd23];

assign tmp_4118_fu_1510_p3 = or_ln785_4_fu_1505_p2[32'd23];

assign tmp_4119_fu_1534_p3 = and_ln786_4_fu_1529_p2[32'd23];

assign tmp_4120_fu_1614_p3 = add_ln1192_515_fu_1608_p2[32'd24];

assign tmp_4121_fu_1628_p3 = acc_4_V_fu_1622_p2[32'd23];

assign tmp_4123_fu_1700_p3 = or_ln785_5_fu_1695_p2[32'd23];

assign tmp_4124_fu_1724_p3 = and_ln786_5_fu_1719_p2[32'd23];

assign tmp_4125_fu_1804_p3 = add_ln1192_516_fu_1798_p2[32'd24];

assign tmp_4126_fu_1818_p3 = acc_5_V_fu_1812_p2[32'd23];

assign tmp_4128_fu_1890_p3 = or_ln785_6_fu_1885_p2[32'd23];

assign tmp_4129_fu_1914_p3 = and_ln786_6_fu_1909_p2[32'd23];

assign tmp_4130_fu_1994_p3 = add_ln1192_517_fu_1988_p2[32'd24];

assign tmp_4131_fu_2008_p3 = acc_6_V_fu_2002_p2[32'd23];

assign tmp_4133_fu_2086_p3 = or_ln785_7_fu_2080_p2[32'd23];

assign tmp_4134_fu_2111_p3 = and_ln786_7_fu_2105_p2[32'd23];

assign tmp_4135_fu_2191_p3 = add_ln1192_518_fu_2185_p2[32'd24];

assign tmp_4136_fu_2205_p3 = acc_7_V_fu_2199_p2[32'd23];

assign tmp_data_0_V_19_fu_922_p3 = ((or_ln340_2049_fu_900_p2[0:0] === 1'b1) ? select_ln340_1024_fu_906_p3 : acc_0_V_63_fu_914_p3);

assign tmp_data_1_V_fu_1112_p3 = ((or_ln340_2051_fu_1090_p2[0:0] === 1'b1) ? select_ln340_1025_fu_1096_p3 : acc_1_V_63_fu_1104_p3);

assign tmp_data_2_V_fu_1302_p3 = ((or_ln340_2053_fu_1280_p2[0:0] === 1'b1) ? select_ln340_1026_fu_1286_p3 : acc_2_V_63_fu_1294_p3);

assign tmp_data_3_V_fu_1492_p3 = ((or_ln340_2055_fu_1470_p2[0:0] === 1'b1) ? select_ln340_1027_fu_1476_p3 : acc_3_V_63_fu_1484_p3);

assign tmp_data_4_V_fu_1682_p3 = ((or_ln340_2057_fu_1660_p2[0:0] === 1'b1) ? select_ln340_1028_fu_1666_p3 : acc_4_V_63_fu_1674_p3);

assign tmp_data_5_V_fu_1872_p3 = ((or_ln340_2059_fu_1850_p2[0:0] === 1'b1) ? select_ln340_1029_fu_1856_p3 : acc_5_V_63_fu_1864_p3);

assign tmp_data_6_V_fu_2062_p3 = ((or_ln340_2061_fu_2040_p2[0:0] === 1'b1) ? select_ln340_1030_fu_2046_p3 : acc_6_V_63_fu_2054_p3);

assign tmp_data_7_V_fu_2259_p3 = ((or_ln340_2063_fu_2237_p2[0:0] === 1'b1) ? select_ln340_1031_fu_2243_p3 : acc_7_V_63_fu_2251_p3);

assign trunc_ln172_fu_467_p1 = i_iw_0_i_i_i_reg_321[0:0];

assign trunc_ln56_fu_560_p1 = w2_V_q0[7:0];

assign w2_V_address0 = zext_ln56_fu_543_p1;

assign xor_ln340_1024_fu_888_p2 = (tmp_4101_fu_868_p3 ^ tmp_4100_fu_854_p3);

assign xor_ln340_1025_fu_1078_p2 = (tmp_4106_fu_1058_p3 ^ tmp_4105_fu_1044_p3);

assign xor_ln340_1026_fu_1268_p2 = (tmp_4111_fu_1248_p3 ^ tmp_4110_fu_1234_p3);

assign xor_ln340_1027_fu_1458_p2 = (tmp_4116_fu_1438_p3 ^ tmp_4115_fu_1424_p3);

assign xor_ln340_1028_fu_1648_p2 = (tmp_4121_fu_1628_p3 ^ tmp_4120_fu_1614_p3);

assign xor_ln340_1029_fu_1838_p2 = (tmp_4126_fu_1818_p3 ^ tmp_4125_fu_1804_p3);

assign xor_ln340_1030_fu_2028_p2 = (tmp_4131_fu_2008_p3 ^ tmp_4130_fu_1994_p3);

assign xor_ln340_1031_fu_2225_p2 = (tmp_4136_fu_2205_p3 ^ tmp_4135_fu_2191_p3);

assign xor_ln340_1032_fu_799_p2 = (tmp_4097_reg_2487 ^ 1'd1);

assign xor_ln340_1033_fu_1179_p2 = (tmp_4107_reg_2515 ^ 1'd1);

assign xor_ln340_1034_fu_1369_p2 = (tmp_4112_reg_2529 ^ 1'd1);

assign xor_ln340_1035_fu_1559_p2 = (tmp_4117_reg_2543 ^ 1'd1);

assign xor_ln340_1036_fu_1749_p2 = (tmp_4122_reg_2557 ^ 1'd1);

assign xor_ln340_1037_fu_1939_p2 = (tmp_4127_reg_2571 ^ 1'd1);

assign xor_ln340_1038_fu_2136_p2 = (tmp_4132_reg_2584 ^ 1'd1);

assign xor_ln340_512_fu_894_p2 = (tmp_4100_fu_854_p3 ^ 1'd1);

assign xor_ln340_513_fu_1084_p2 = (tmp_4105_fu_1044_p3 ^ 1'd1);

assign xor_ln340_514_fu_1274_p2 = (tmp_4110_fu_1234_p3 ^ 1'd1);

assign xor_ln340_515_fu_1464_p2 = (tmp_4115_fu_1424_p3 ^ 1'd1);

assign xor_ln340_516_fu_1654_p2 = (tmp_4120_fu_1614_p3 ^ 1'd1);

assign xor_ln340_517_fu_1844_p2 = (tmp_4125_fu_1804_p3 ^ 1'd1);

assign xor_ln340_518_fu_2034_p2 = (tmp_4130_fu_1994_p3 ^ 1'd1);

assign xor_ln340_519_fu_2231_p2 = (tmp_4135_fu_2191_p3 ^ 1'd1);

assign xor_ln340_fu_989_p2 = (tmp_4102_reg_2501 ^ 1'd1);

assign xor_ln785_1_fu_948_p2 = (tmp_4102_reg_2501 ^ 1'd1);

assign xor_ln785_2_fu_1138_p2 = (tmp_4107_reg_2515 ^ 1'd1);

assign xor_ln785_319_fu_1328_p2 = (tmp_4112_reg_2529 ^ 1'd1);

assign xor_ln785_4_fu_1518_p2 = (tmp_4117_reg_2543 ^ 1'd1);

assign xor_ln785_5_fu_1708_p2 = (tmp_4122_reg_2557 ^ 1'd1);

assign xor_ln785_6_fu_1898_p2 = (tmp_4127_reg_2571 ^ 1'd1);

assign xor_ln785_7_fu_2094_p2 = (tmp_4132_reg_2584 ^ 1'd1);

assign xor_ln785_fu_758_p2 = (tmp_4097_reg_2487 ^ 1'd1);

assign xor_ln786_1024_fu_782_p2 = (tmp_4099_fu_774_p3 ^ 1'd1);

assign xor_ln786_1025_fu_972_p2 = (tmp_4104_fu_964_p3 ^ 1'd1);

assign xor_ln786_1026_fu_1162_p2 = (tmp_4109_fu_1154_p3 ^ 1'd1);

assign xor_ln786_1027_fu_1352_p2 = (tmp_4114_fu_1344_p3 ^ 1'd1);

assign xor_ln786_1028_fu_1542_p2 = (tmp_4119_fu_1534_p3 ^ 1'd1);

assign xor_ln786_1029_fu_1732_p2 = (tmp_4124_fu_1724_p3 ^ 1'd1);

assign xor_ln786_1030_fu_1922_p2 = (tmp_4129_fu_1914_p3 ^ 1'd1);

assign xor_ln786_1031_fu_2119_p2 = (tmp_4134_fu_2111_p3 ^ 1'd1);

assign xor_ln786_1_fu_1066_p2 = (tmp_4106_fu_1058_p3 ^ 1'd1);

assign xor_ln786_2_fu_1256_p2 = (tmp_4111_fu_1248_p3 ^ 1'd1);

assign xor_ln786_3_fu_1446_p2 = (tmp_4116_fu_1438_p3 ^ 1'd1);

assign xor_ln786_4_fu_1636_p2 = (tmp_4121_fu_1628_p3 ^ 1'd1);

assign xor_ln786_5_fu_1826_p2 = (tmp_4126_fu_1818_p3 ^ 1'd1);

assign xor_ln786_6_fu_2016_p2 = (tmp_4131_fu_2008_p3 ^ 1'd1);

assign xor_ln786_7_fu_2213_p2 = (tmp_4136_fu_2205_p3 ^ 1'd1);

assign xor_ln786_fu_876_p2 = (tmp_4101_fu_868_p3 ^ 1'd1);

assign zext_ln56_fu_543_p1 = ap_phi_mux_in_index21_phi_fu_336_p4;

endmodule //conv_1d_cl_array_ap_int_16_1u_array_ap_fixed_24_16_0_0_0_8u_config2_s
