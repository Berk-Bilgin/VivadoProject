// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s_HH_
#define _zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > data_V_data_V_TDATA;
    sc_in< sc_logic > data_V_data_V_TVALID;
    sc_out< sc_logic > data_V_data_V_TREADY;
    sc_out< sc_lv<16> > res_V_data_V_din;
    sc_in< sc_logic > res_V_data_V_full_n;
    sc_out< sc_logic > res_V_data_V_write;


    // Module declarations
    zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s(sc_module_name name);
    SC_HAS_PROCESS(zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s);

    ~zeropad1d_cl_array_ap_int_16_1u_array_ap_int_16_1u_config18_s();

    sc_trace_file* mVcdFile;

    regslice_both<16>* regslice_both_data_V_data_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_V_data_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln37_fu_84_p2;
    sc_signal< sc_logic > res_V_data_V_blk_n;
    sc_signal< sc_lv<7> > i_fu_90_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<7> > i1_0_reg_73;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_data_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<16> > data_V_data_V_TDATA_int;
    sc_signal< sc_logic > data_V_data_V_TVALID_int;
    sc_signal< sc_logic > data_V_data_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_data_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data_V_data_V_TDATA_blk_n();
    void thread_data_V_data_V_TREADY();
    void thread_data_V_data_V_TREADY_int();
    void thread_i_fu_90_p2();
    void thread_icmp_ln37_fu_84_p2();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_res_V_data_V_blk_n();
    void thread_res_V_data_V_din();
    void thread_res_V_data_V_write();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
